{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "likht-adf"
		},
		"ADLS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLS'"
		},
		"BlobInput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BlobInput'"
		},
		"WWIInput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'WWIInput'"
		},
		"ADLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://likhtsa.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Application Ingestion Full Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Application Tables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Table_Name",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{item()}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Cities",
												"activities": [
													{
														"name": "Copy Cities",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT CityID, CityName, StateProvinceID, Location.ToString() as Location, LatestRecordedPopulation, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Cities_Archive",
												"activities": [
													{
														"name": "Copy Cities_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT CityID, CityName, StateProvinceID, Location.ToString() as Location, LatestRecordedPopulation, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Countries",
												"activities": [
													{
														"name": "Copy Countries",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT CountryID, CountryName, FormalName, IsoAlpha3Code, IsoNumericCode, CountryType, LatestRecordedPopulation, Continent, Region, Subregion, Border.ToString() as Border, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Countries_Archive",
												"activities": [
													{
														"name": "Copy Countries_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT CountryID, CountryName, FormalName, IsoAlpha3Code, IsoNumericCode, CountryType, LatestRecordedPopulation, Continent, Region, Subregion, Border.ToString() as Border, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "DeliveryMethods",
												"activities": [
													{
														"name": "Copy DeliveryMethods",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "DeliveryMethods_Archive",
												"activities": [
													{
														"name": "Copy DeliveryMethods_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "PaymentMethods",
												"activities": [
													{
														"name": "Copy PaymentMethods",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "PaymentMethods_Archive",
												"activities": [
													{
														"name": "Copy PaymentMethods_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "People",
												"activities": [
													{
														"name": "Copy People",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "People_Archive",
												"activities": [
													{
														"name": "Copy People_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StateProvinces",
												"activities": [
													{
														"name": "Copy StateProvinces",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT StateProvinceID, StateProvinceCode, StateProvinceName, CountryID, SalesTerritory, Border.ToString() as Border, LatestRecordedPopulation, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StateProvinces_Archive",
												"activities": [
													{
														"name": "Copy StateProvinces_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT StateProvinceID, StateProvinceCode, StateProvinceName, CountryID, SalesTerritory, Border.ToString() as Border, LatestRecordedPopulation, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "SystemParameters",
												"activities": [
													{
														"name": "Copy SystemParameters",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT SystemParameterID, DeliveryAddressLine1, DeliveryAddressLine2, DeliveryCityID, DeliveryPostalCode, DeliveryLocation.ToString() as DeliveryLocation, PostalAddressLine1, PostalAddressLine2, PostalCityID, PostalPostalCode, ApplicationSettings, LastEditedBy, LastEditedWhen FROM  @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "TransactionTypes",
												"activities": [
													{
														"name": "Copy TransactionTypes",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "TransactionTypes_Archive",
												"activities": [
													{
														"name": "Copy TransactionTypes_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Application_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Table_Name": {
						"type": "array",
						"defaultValue": [
							"Cities",
							"Cities_Archive",
							"Countries",
							"Countries_Archive",
							"DeliveryMethods",
							"DeliveryMethods_Archive",
							"PaymentMethods",
							"PaymentMethods_Archive",
							"People",
							"People_Archive",
							"StateProvinces",
							"StateProvinces_Archive",
							"SystemParameters",
							"TransactionTypes",
							"TransactionTypes_Archive"
						]
					},
					"Schema_Name": {
						"type": "string",
						"defaultValue": "Application"
					}
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-11T20:19:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WWI_Standard')]",
				"[concat(variables('factoryId'), '/datasets/Application_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingestion Full Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Application",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Application Ingestion Full Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"Table_Name": {
									"value": "@pipeline().parameters.ApplicationTables",
									"type": "Expression"
								},
								"Schema_Name": {
									"value": "@pipeline().parameters.ApplicationSchema",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load Purchasing",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Purchasing Ingestion Full Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"Table_Name": {
									"value": "@pipeline().parameters.PurchasingTables",
									"type": "Expression"
								},
								"Schema_Name": {
									"value": "@pipeline().parameters.PurchasingSchema",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load Sales",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Sales Ingestion Full Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"Table_Name": {
									"value": "@pipeline().parameters.SalesTables",
									"type": "Expression"
								},
								"Schema_Name": {
									"value": "@pipeline().parameters.SalesSchema",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load Warehouse",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Warehouse Ingestion Full Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"Table_Name": {
									"value": "@pipeline().parameters.WarehouseTables",
									"type": "Expression"
								},
								"Schema_Name": {
									"value": "@pipeline().parameters.WarehouseSchema",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ApplicationTables": {
						"type": "array",
						"defaultValue": [
							"Cities",
							"Cities_Archive",
							"Countries",
							"Countries_Archive",
							"DeliveryMethods",
							"DeliveryMethods_Archive",
							"PaymentMethods",
							"PaymentMethods_Archive",
							"People",
							"People_Archive",
							"StateProvinces",
							"StateProvinces_Archive",
							"SystemParameters",
							"TransactionTypes",
							"TransactionTypes_Archive"
						]
					},
					"PurchasingTables": {
						"type": "array",
						"defaultValue": [
							"PurchaseOrderLines",
							"PurchaseOrders",
							"SupplierCategories",
							"SupplierCategories_Archive",
							"Suppliers",
							"Suppliers_Archive",
							"SupplierTransactions"
						]
					},
					"SalesTables": {
						"type": "array",
						"defaultValue": [
							"BuyingGroups",
							"BuyingGroups_Archive",
							"CustomerCategories",
							"CustomerCategories_Archive",
							"Customers",
							"Customers_Archive",
							"CustomerTransactions",
							"InvoiceLines",
							"Invoices",
							"OrderLines",
							"Orders",
							"SpecialDeals"
						]
					},
					"WarehouseTables": {
						"type": "array",
						"defaultValue": [
							"ColdRoomTemperatures",
							"ColdRoomTemperatures_Archive",
							"Colors",
							"Colors_Archive",
							"PackageTypes",
							"PackageTypes_Archive",
							"StockGroups",
							"StockGroups_Archive",
							"StockItemHoldings",
							"StockItems",
							"StockItems_Archive",
							"StockItemStockGroups",
							"StockItemTransactions",
							"VehicleTemperatures"
						]
					},
					"ApplicationSchema": {
						"type": "string",
						"defaultValue": "Application"
					},
					"PurchasingSchema": {
						"type": "string",
						"defaultValue": "Purchasing"
					},
					"SalesSchema": {
						"type": "string",
						"defaultValue": "Sales"
					},
					"WarehouseSchema": {
						"type": "string",
						"defaultValue": "Warehouse"
					}
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-12T08:45:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Application Ingestion Full Load')]",
				"[concat(variables('factoryId'), '/pipelines/Purchasing Ingestion Full Load')]",
				"[concat(variables('factoryId'), '/pipelines/Sales Ingestion Full Load')]",
				"[concat(variables('factoryId'), '/pipelines/Warehouse Ingestion Full Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Dimension Date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Date",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dimension_Date",
								"type": "DataFlowReference",
								"parameters": {
									"DateCounter": "addMonths(lastDayOfMonth(currentDate()),12)"
								},
								"datasetParameters": {
									"Date": {},
									"LoadDimensionDate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"dates": {
						"type": "Array",
						"defaultValue": []
					}
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-08T12:37:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dimension_Date')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Employee",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "City",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dimension_Employee",
								"type": "DataFlowReference",
								"parameters": {
									"EndOfTime": "toTimestamp('9999-12-31 23:59:59.999','yyyy-MM-dd HH:mm:ss.SSS')",
									"LastCutoff": "toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')",
									"NewCutoff": {
										"value": "@pipeline().parameters.DataLoadStarted",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"People": {},
									"PeopleArchive": {},
									"LoadDimensionEmployee": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Customer",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dimension_Customer",
								"type": "DataFlowReference",
								"parameters": {
									"EndOfTime": "toTimestamp('9999-12-31 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS')",
									"LastCutoff": "toTimestamp('2012-05-06T12:31:17.0000000', 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')",
									"NewCutoff": {
										"value": "@pipeline().parameters.DataLoadStarted",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BuyingGroups": {},
									"BuyingGroupsArchive": {},
									"CustomerCategories": {},
									"CustomerCategoriesArchive": {},
									"Customers": {},
									"CustomersArchive": {},
									"People": {},
									"LoadDimensionCustomer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "City",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dimension_City",
								"type": "DataFlowReference",
								"parameters": {
									"EndOfTime": "toTimestamp('9999-12-31 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS')",
									"LastCutoff": "toTimestamp('2012-05-06T12:31:17.0000000', 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')",
									"NewCutoff": {
										"value": "@pipeline().parameters.DataLoadStarted",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Countries": {},
									"CountriesArchive": {},
									"StateProvinces": {},
									"StateProvincesArchive": {},
									"Cities": {},
									"CitiesArchive": {},
									"LoadDimensionCity": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "StockItem",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dimension_StockItem",
								"type": "DataFlowReference",
								"parameters": {
									"LastCutoff": "toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')",
									"NewCutoff": {
										"value": "@pipeline().parameters.DataLoadStarted",
										"type": "Expression"
									},
									"EndOfTime": "toTimestamp('9999-12-31 23:59:59.999','yyyy-MM-dd HH:mm:ss.SSS')"
								},
								"datasetParameters": {
									"StockItems": {},
									"StockItemsArchive": {},
									"PackageTypes": {},
									"Colors": {},
									"LoadDimensionStickItem": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataLoadStarted": {
						"type": "string",
						"defaultValue": "currentTimestamp()"
					}
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-22T22:08:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dimension_Employee')]",
				"[concat(variables('factoryId'), '/dataflows/Dimension_Customer')]",
				"[concat(variables('factoryId'), '/dataflows/Dimension_City')]",
				"[concat(variables('factoryId'), '/dataflows/Dimension_StockItem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Fact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sale",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Fact_Sale",
								"type": "DataFlowReference",
								"parameters": {
									"LastCutoff": "toTimestamp('2012-05-06T12:31:17.0000000', 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')",
									"NewCutoff": "currentTimestamp()"
								},
								"datasetParameters": {
									"Invoices": {},
									"InvoiceLines": {},
									"StockItems": {},
									"PackageTypes": {},
									"Customers": {},
									"DimensionCustomer": {},
									"LoadFactSale": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-16T15:11:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Fact_Sale')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Purchasing Ingestion Full Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Purchasing Tables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Table_Name",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{item()}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "PurchaseOrderLines",
												"activities": [
													{
														"name": "Copy PurchaseOrderLines",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Purchasing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "PurchaseOrders",
												"activities": [
													{
														"name": "Copy PurchaseOrders",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Purchasing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "SupplierCategories",
												"activities": [
													{
														"name": "Copy SupplierCategories",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Purchasing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "SupplierCategories_Archive",
												"activities": [
													{
														"name": "Copy SupplierCategories_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Purchasing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Suppliers",
												"activities": [
													{
														"name": "Copy Suppliers",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT SupplierID, SupplierName, SupplierCategoryID, PrimaryContactPersonID, AlternateContactPersonID, DeliveryMethodID, DeliveryCityID, PostalCityID, SupplierReference, BankAccountName, BankAccountBranch, BankAccountCode, BankAccountNumber, BankInternationalCode, PaymentDays, InternalComments, PhoneNumber, FaxNumber, WebsiteURL, DeliveryAddressLine1, DeliveryAddressLine2, DeliveryPostalCode, DeliveryLocation.ToString() as DeliveryLocation, PostalAddressLine1, PostalAddressLine2, PostalPostalCode, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Purchasing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Suppliers_Archive",
												"activities": [
													{
														"name": "Copy Suppliers_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT SupplierID, SupplierName, SupplierCategoryID, PrimaryContactPersonID, AlternateContactPersonID, DeliveryMethodID, DeliveryCityID, PostalCityID, SupplierReference, BankAccountName, BankAccountBranch, BankAccountCode, BankAccountNumber, BankInternationalCode, PaymentDays, InternalComments, PhoneNumber, FaxNumber, WebsiteURL, DeliveryAddressLine1, DeliveryAddressLine2, DeliveryPostalCode, DeliveryLocation.ToString() as DeliveryLocation, PostalAddressLine1, PostalAddressLine2, PostalPostalCode, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Purchasing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "SupplierTransactions",
												"activities": [
													{
														"name": "Copy SupplierTransactions",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Purchasing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Table_Name": {
						"type": "array",
						"defaultValue": [
							"PurchaseOrderLines",
							"PurchaseOrders",
							"SupplierCategories",
							"SupplierCategories_Archive",
							"Suppliers",
							"Suppliers_Archive",
							"SupplierTransactions"
						]
					},
					"Schema_Name": {
						"type": "string",
						"defaultValue": "Purchasing"
					}
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-12T08:43:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WWI_Standard')]",
				"[concat(variables('factoryId'), '/datasets/Purchasing_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales Ingestion Full Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Sales Tables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Table_Name",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{item()}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "BuyingGroups",
												"activities": [
													{
														"name": "Copy BuyingGroups",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "BuyingGroups_Archive",
												"activities": [
													{
														"name": "Copy BuyingGroups_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "CustomerCategories",
												"activities": [
													{
														"name": "Copy CustomerCategories",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "CustomerCategories_Archive",
												"activities": [
													{
														"name": "Copy CustomerCategories_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Customers",
												"activities": [
													{
														"name": "Copy Customers",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT CustomerID, CustomerName, BillToCustomerID, CustomerCategoryID, BuyingGroupID, PrimaryContactPersonID, AlternateContactPersonID, DeliveryMethodID, DeliveryCityID, PostalCityID, CreditLimit, AccountOpenedDate, StandardDiscountPercentage, IsStatementSent, IsOnCreditHold, PaymentDays, PhoneNumber, FaxNumber, DeliveryRun, RunPosition, WebsiteURL, DeliveryAddressLine1, DeliveryAddressLine2, DeliveryPostalCode, DeliveryLocation.ToString() as DeliveryLocation, PostalAddressLine1, PostalAddressLine2, PostalPostalCode, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Customers_Archive",
												"activities": [
													{
														"name": "Copy Customers_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT CustomerID, CustomerName, BillToCustomerID, CustomerCategoryID, BuyingGroupID, PrimaryContactPersonID, AlternateContactPersonID, DeliveryMethodID, DeliveryCityID, PostalCityID, CreditLimit, AccountOpenedDate, StandardDiscountPercentage, IsStatementSent, IsOnCreditHold, PaymentDays, PhoneNumber, FaxNumber, DeliveryRun, RunPosition, WebsiteURL, DeliveryAddressLine1, DeliveryAddressLine2, DeliveryPostalCode, DeliveryLocation.ToString() as DeliveryLocation, PostalAddressLine1, PostalAddressLine2, PostalPostalCode, LastEditedBy, ValidFrom, ValidTo FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "CustomerTransactions",
												"activities": [
													{
														"name": "Copy CustomerTransactions",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "InvoiceLines",
												"activities": [
													{
														"name": "Copy InvoiceLines",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Invoices",
												"activities": [
													{
														"name": "Copy Invoices",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "OrderLines",
												"activities": [
													{
														"name": "Copy OrderLines",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Orders",
												"activities": [
													{
														"name": "Copy Orders",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "SpecialDeals",
												"activities": [
													{
														"name": "Copy SpecialDeals",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Sales_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Table_Name": {
						"type": "array",
						"defaultValue": [
							"BuyingGroups",
							"BuyingGroups_Archive",
							"CustomerCategories",
							"CustomerCategories_Archive",
							"Customers",
							"Customers_Archive",
							"CustomerTransactions",
							"InvoiceLines",
							"Invoices",
							"OrderLines",
							"Orders",
							"SpecialDeals"
						]
					},
					"Schema_Name": {
						"type": "string",
						"defaultValue": "Sales"
					}
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-12T08:43:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WWI_Standard')]",
				"[concat(variables('factoryId'), '/datasets/Sales_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Warehouse Ingestion Full Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Warehouse Tables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Table_Name",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{item()}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "ColdRoomTemperatures",
												"activities": [
													{
														"name": "Copy ColdRoomTemperatures",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "ColdRoomTemperatures_Archive",
												"activities": [
													{
														"name": "Copy ColdRoomTemperatures_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Colors",
												"activities": [
													{
														"name": "Copy Colors",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "Colors_Archive",
												"activities": [
													{
														"name": "Copy Colors_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "PackageTypes",
												"activities": [
													{
														"name": "Copy PackageTypes",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "PackageTypes_Archive",
												"activities": [
													{
														"name": "Copy PackageTypes_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StockGroups",
												"activities": [
													{
														"name": "Copy StockGroups",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StockGroups_Archive",
												"activities": [
													{
														"name": "Copy StockGroups_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StockItemHoldings",
												"activities": [
													{
														"name": "Copy StockItemHoldings",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StockItems",
												"activities": [
													{
														"name": "Copy StockItems",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StockItems_Archive",
												"activities": [
													{
														"name": "Copy StockItems_Archive",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StockItemStockGroups",
												"activities": [
													{
														"name": "Copy StockItemStockGroups",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "StockItemTransactions",
												"activities": [
													{
														"name": "Copy StockItemTransactions",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											},
											{
												"value": "VehicleTemperatures",
												"activities": [
													{
														"name": "Copy VehicleTemperatures",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "SELECT * FROM @{pipeline().parameters.Schema_Name}.@{item()}",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "WWI_Standard",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "Warehouse_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Table_Name": {
						"type": "array",
						"defaultValue": [
							"ColdRoomTemperatures",
							"ColdRoomTemperatures_Archive",
							"Colors",
							"Colors_Archive",
							"PackageTypes",
							"PackageTypes_Archive",
							"StockGroups",
							"StockGroups_Archive",
							"StockItemHoldings",
							"StockItems",
							"StockItems_Archive",
							"StockItemStockGroups",
							"StockItemTransactions",
							"VehicleTemperatures"
						]
					},
					"Schema_Name": {
						"type": "string",
						"defaultValue": "Warehouse"
					}
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-12T08:43:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WWI_Standard')]",
				"[concat(variables('factoryId'), '/datasets/Warehouse_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Application_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{item()}.parquet",
							"type": "Expression"
						},
						"folderPath": {
							"value": "data/@{pipeline().parameters.Schema_Name}/@{item()}",
							"type": "Expression"
						},
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CityID",
						"type": "INT32"
					},
					{
						"name": "CityName",
						"type": "UTF8"
					},
					{
						"name": "StateProvinceID",
						"type": "INT32"
					},
					{
						"name": "LocationLat",
						"type": "DOUBLE"
					},
					{
						"name": "LocationLong",
						"type": "DOUBLE"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BuyingGroups')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "BuyingGroups.parquet",
						"folderPath": "data/Sales/BuyingGroups",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "BuyingGroupID",
						"type": "INT32"
					},
					{
						"name": "BuyingGroupName",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BuyingGroups_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "BuyingGroups_Archive.parquet",
						"folderPath": "data/Sales/BuyingGroups_Archive",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "BuyingGroupID",
						"type": "INT32"
					},
					{
						"name": "BuyingGroupName",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cities')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Cities.parquet",
						"folderPath": "data/Application/Cities",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CityID",
						"type": "INT32"
					},
					{
						"name": "CityName",
						"type": "UTF8"
					},
					{
						"name": "StateProvinceID",
						"type": "INT32"
					},
					{
						"name": "Location",
						"type": "UTF8"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cities_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Cities_Archive.parquet",
						"folderPath": "data/Application/Cities_Archive",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CityID",
						"type": "INT32"
					},
					{
						"name": "CityName",
						"type": "UTF8"
					},
					{
						"name": "StateProvinceID",
						"type": "INT32"
					},
					{
						"name": "Location",
						"type": "UTF8"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Colors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Colors.parquet",
						"folderPath": "data/Warehouse/Colors",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ColorID",
						"type": "INT32"
					},
					{
						"name": "ColorName",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Countries')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Countries.parquet",
						"folderPath": "data/Application/Countries",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CountryID",
						"type": "INT32"
					},
					{
						"name": "CountryName",
						"type": "UTF8"
					},
					{
						"name": "FormalName",
						"type": "UTF8"
					},
					{
						"name": "IsoAlpha3Code",
						"type": "UTF8"
					},
					{
						"name": "IsoNumericCode",
						"type": "INT32"
					},
					{
						"name": "CountryType",
						"type": "UTF8"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "Continent",
						"type": "UTF8"
					},
					{
						"name": "Region",
						"type": "UTF8"
					},
					{
						"name": "Subregion",
						"type": "UTF8"
					},
					{
						"name": "Border",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Countries_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Countries_Archive.parquet",
						"folderPath": "data/Application/Countries_Archive",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CountryID",
						"type": "INT32"
					},
					{
						"name": "CountryName",
						"type": "UTF8"
					},
					{
						"name": "FormalName",
						"type": "UTF8"
					},
					{
						"name": "IsoAlpha3Code",
						"type": "UTF8"
					},
					{
						"name": "IsoNumericCode",
						"type": "INT32"
					},
					{
						"name": "CountryType",
						"type": "UTF8"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "Continent",
						"type": "UTF8"
					},
					{
						"name": "Region",
						"type": "UTF8"
					},
					{
						"name": "Subregion",
						"type": "UTF8"
					},
					{
						"name": "Border",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerCategories')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CustomerCategories.parquet",
						"folderPath": "data/Sales/CustomerCategories",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerCategoryID",
						"type": "INT32"
					},
					{
						"name": "CustomerCategoryName",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerCategories_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CustomerCategories_Archive.parquet",
						"folderPath": "data/Sales/CustomerCategories_Archive",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerCategoryID",
						"type": "INT32"
					},
					{
						"name": "CustomerCategoryName",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customers.parquet",
						"folderPath": "data/Sales/Customers",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "CustomerName",
						"type": "UTF8"
					},
					{
						"name": "BillToCustomerID",
						"type": "INT32"
					},
					{
						"name": "CustomerCategoryID",
						"type": "INT32"
					},
					{
						"name": "BuyingGroupID",
						"type": "INT32"
					},
					{
						"name": "PrimaryContactPersonID",
						"type": "INT32"
					},
					{
						"name": "AlternateContactPersonID",
						"type": "INT32"
					},
					{
						"name": "DeliveryMethodID",
						"type": "INT32"
					},
					{
						"name": "DeliveryCityID",
						"type": "INT32"
					},
					{
						"name": "PostalCityID",
						"type": "INT32"
					},
					{
						"name": "CreditLimit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AccountOpenedDate",
						"type": "DATE"
					},
					{
						"name": "StandardDiscountPercentage",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "IsStatementSent",
						"type": "BOOLEAN"
					},
					{
						"name": "IsOnCreditHold",
						"type": "BOOLEAN"
					},
					{
						"name": "PaymentDays",
						"type": "INT32"
					},
					{
						"name": "PhoneNumber",
						"type": "UTF8"
					},
					{
						"name": "FaxNumber",
						"type": "UTF8"
					},
					{
						"name": "DeliveryRun",
						"type": "UTF8"
					},
					{
						"name": "RunPosition",
						"type": "UTF8"
					},
					{
						"name": "WebsiteURL",
						"type": "UTF8"
					},
					{
						"name": "DeliveryAddressLine1",
						"type": "UTF8"
					},
					{
						"name": "DeliveryAddressLine2",
						"type": "UTF8"
					},
					{
						"name": "DeliveryPostalCode",
						"type": "UTF8"
					},
					{
						"name": "DeliveryLocation",
						"type": "UTF8"
					},
					{
						"name": "PostalAddressLine1",
						"type": "UTF8"
					},
					{
						"name": "PostalAddressLine2",
						"type": "UTF8"
					},
					{
						"name": "PostalPostalCode",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customers_Archive.parquet",
						"folderPath": "data/Sales/Customers_Archive",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "CustomerName",
						"type": "UTF8"
					},
					{
						"name": "BillToCustomerID",
						"type": "INT32"
					},
					{
						"name": "CustomerCategoryID",
						"type": "INT32"
					},
					{
						"name": "BuyingGroupID",
						"type": "INT32"
					},
					{
						"name": "PrimaryContactPersonID",
						"type": "INT32"
					},
					{
						"name": "AlternateContactPersonID",
						"type": "INT32"
					},
					{
						"name": "DeliveryMethodID",
						"type": "INT32"
					},
					{
						"name": "DeliveryCityID",
						"type": "INT32"
					},
					{
						"name": "PostalCityID",
						"type": "INT32"
					},
					{
						"name": "CreditLimit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AccountOpenedDate",
						"type": "DATE"
					},
					{
						"name": "StandardDiscountPercentage",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "IsStatementSent",
						"type": "BOOLEAN"
					},
					{
						"name": "IsOnCreditHold",
						"type": "BOOLEAN"
					},
					{
						"name": "PaymentDays",
						"type": "INT32"
					},
					{
						"name": "PhoneNumber",
						"type": "UTF8"
					},
					{
						"name": "FaxNumber",
						"type": "UTF8"
					},
					{
						"name": "DeliveryRun",
						"type": "UTF8"
					},
					{
						"name": "RunPosition",
						"type": "UTF8"
					},
					{
						"name": "WebsiteURL",
						"type": "UTF8"
					},
					{
						"name": "DeliveryAddressLine1",
						"type": "UTF8"
					},
					{
						"name": "DeliveryAddressLine2",
						"type": "UTF8"
					},
					{
						"name": "DeliveryPostalCode",
						"type": "UTF8"
					},
					{
						"name": "DeliveryLocation",
						"type": "UTF8"
					},
					{
						"name": "PostalAddressLine1",
						"type": "UTF8"
					},
					{
						"name": "PostalAddressLine2",
						"type": "UTF8"
					},
					{
						"name": "PostalPostalCode",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataWarehouse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dw.parquet",
						"folderPath": "data/data-warehouse/Full-Load",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CityID",
						"type": "INT32"
					},
					{
						"name": "CityName",
						"type": "UTF8"
					},
					{
						"name": "StateProvinceID",
						"type": "INT32"
					},
					{
						"name": "Location",
						"type": "BINARY"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_Date')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWIInput",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Date",
						"type": "date"
					},
					{
						"name": "Day Number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Day",
						"type": "nvarchar"
					},
					{
						"name": "Month",
						"type": "nvarchar"
					},
					{
						"name": "Short Month",
						"type": "nvarchar"
					},
					{
						"name": "Calendar Month Number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Calendar Month Label",
						"type": "nvarchar"
					},
					{
						"name": "Calendar Year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Calendar Year Label",
						"type": "nvarchar"
					},
					{
						"name": "Fiscal Month Number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fiscal Month Label",
						"type": "nvarchar"
					},
					{
						"name": "Fiscal Year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fiscal Year Label",
						"type": "nvarchar"
					},
					{
						"name": "ISO Week Number",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Dimension",
					"table": "Date"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWIInput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_City')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dimension_City.parquet",
						"folderPath": "data/data-warehouse/Full-Load",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CityKey",
						"type": "INT64"
					},
					{
						"name": "WWICityID",
						"type": "INT32"
					},
					{
						"name": "City",
						"type": "UTF8"
					},
					{
						"name": "StateProvince",
						"type": "UTF8"
					},
					{
						"name": "Country",
						"type": "UTF8"
					},
					{
						"name": "Continent",
						"type": "UTF8"
					},
					{
						"name": "SalesTerritory",
						"type": "UTF8"
					},
					{
						"name": "Region",
						"type": "UTF8"
					},
					{
						"name": "Subregion",
						"type": "UTF8"
					},
					{
						"name": "Location",
						"type": "BINARY"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					},
					{
						"name": "LineageKey",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dimension_Customer.parquet",
						"folderPath": "data/data-warehouse/Full-Load",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerKey",
						"type": "INT64"
					},
					{
						"name": "WWICustomerID",
						"type": "INT32"
					},
					{
						"name": "Customer",
						"type": "UTF8"
					},
					{
						"name": "BillToCustomer",
						"type": "UTF8"
					},
					{
						"name": "Category",
						"type": "UTF8"
					},
					{
						"name": "BuyingGroup",
						"type": "UTF8"
					},
					{
						"name": "PrimaryContact",
						"type": "UTF8"
					},
					{
						"name": "PostalCode",
						"type": "UTF8"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					},
					{
						"name": "LineageKey",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_Date')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dimension_Date.parquet",
						"folderPath": "data/data-warehouse/date",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "DateColumn",
						"type": "DATE"
					},
					{
						"name": "DayNumber",
						"type": "INT32"
					},
					{
						"name": "Day",
						"type": "INT32"
					},
					{
						"name": "Month",
						"type": "UTF8"
					},
					{
						"name": "ShortMonth",
						"type": "UTF8"
					},
					{
						"name": "CalendarMonthNumber",
						"type": "INT32"
					},
					{
						"name": "CalendarMonthLabel",
						"type": "UTF8"
					},
					{
						"name": "CalendarYear",
						"type": "INT32"
					},
					{
						"name": "CalendarYearLabel",
						"type": "UTF8"
					},
					{
						"name": "FiscalMonthNumber",
						"type": "INT32"
					},
					{
						"name": "FiscalMonthLabel",
						"type": "UTF8"
					},
					{
						"name": "FiscalYear",
						"type": "INT32"
					},
					{
						"name": "FiscalYearLabel",
						"type": "UTF8"
					},
					{
						"name": "ISOWeekNumber",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_Employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dimension_Employee.parquet",
						"folderPath": "data/data-warehouse/Full-Load",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "EmployeeKey",
						"type": "INT64"
					},
					{
						"name": "WWIEmployeeID",
						"type": "INT32"
					},
					{
						"name": "Employee",
						"type": "UTF8"
					},
					{
						"name": "PreferredName",
						"type": "UTF8"
					},
					{
						"name": "IsSalesperson",
						"type": "BOOLEAN"
					},
					{
						"name": "Photo",
						"type": "BINARY"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					},
					{
						"name": "LineageKey",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_StockItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Dimension_StockItem.parquet",
						"folderPath": "data/data-warehouse/Full-Load",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "StockItemKey",
						"type": "INT64"
					},
					{
						"name": "WWIStockItemID",
						"type": "INT32"
					},
					{
						"name": "StockItem",
						"type": "UTF8"
					},
					{
						"name": "Color",
						"type": "UTF8"
					},
					{
						"name": "SellingPackage",
						"type": "UTF8"
					},
					{
						"name": "BuyingPackage",
						"type": "UTF8"
					},
					{
						"name": "Brand",
						"type": "UTF8"
					},
					{
						"name": "Size",
						"type": "UTF8"
					},
					{
						"name": "LeadTimeDays",
						"type": "INT32"
					},
					{
						"name": "QuantityPerOuter",
						"type": "INT32"
					},
					{
						"name": "IsChillerStock",
						"type": "BOOLEAN"
					},
					{
						"name": "Barcode",
						"type": "UTF8"
					},
					{
						"name": "TaxRate",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Photo",
						"type": "BINARY"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					},
					{
						"name": "LineageKey",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoiceLines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "InvoiceLines.parquet",
						"folderPath": "data/Sales/InvoiceLines",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "InvoiceLineID",
						"type": "INT32"
					},
					{
						"name": "InvoiceID",
						"type": "INT32"
					},
					{
						"name": "StockItemID",
						"type": "INT32"
					},
					{
						"name": "Description",
						"type": "UTF8"
					},
					{
						"name": "PackageTypeID",
						"type": "INT32"
					},
					{
						"name": "Quantity",
						"type": "INT32"
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TaxRate",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "TaxAmount",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "LineProfit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "ExtendedPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "LastEditedWhen",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Invoices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Invoices.parquet",
						"folderPath": "data/Sales/Invoices",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "InvoiceID",
						"type": "INT32"
					},
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "BillToCustomerID",
						"type": "INT32"
					},
					{
						"name": "OrderID",
						"type": "INT32"
					},
					{
						"name": "DeliveryMethodID",
						"type": "INT32"
					},
					{
						"name": "ContactPersonID",
						"type": "INT32"
					},
					{
						"name": "AccountsPersonID",
						"type": "INT32"
					},
					{
						"name": "SalespersonPersonID",
						"type": "INT32"
					},
					{
						"name": "PackedByPersonID",
						"type": "INT32"
					},
					{
						"name": "InvoiceDate",
						"type": "DATE"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "IsCreditNote",
						"type": "BOOLEAN"
					},
					{
						"name": "CreditNoteReason",
						"type": "UTF8"
					},
					{
						"name": "Comments",
						"type": "UTF8"
					},
					{
						"name": "DeliveryInstructions",
						"type": "UTF8"
					},
					{
						"name": "InternalComments",
						"type": "UTF8"
					},
					{
						"name": "TotalDryItems",
						"type": "INT32"
					},
					{
						"name": "TotalChillerItems",
						"type": "INT32"
					},
					{
						"name": "DeliveryRun",
						"type": "UTF8"
					},
					{
						"name": "RunPosition",
						"type": "UTF8"
					},
					{
						"name": "ReturnedDeliveryData",
						"type": "UTF8"
					},
					{
						"name": "ConfirmedDeliveryTime",
						"type": "INT96"
					},
					{
						"name": "ConfirmedReceivedBy",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "LastEditedWhen",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PackageTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "PackageTypes.parquet",
						"folderPath": "data/Warehouse/PackageTypes",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PackageTypeID",
						"type": "INT32"
					},
					{
						"name": "PackageTypeName",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/People')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "People.parquet",
						"folderPath": "data/Application/People",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PersonID",
						"type": "INT32"
					},
					{
						"name": "FullName",
						"type": "UTF8"
					},
					{
						"name": "PreferredName",
						"type": "UTF8"
					},
					{
						"name": "SearchName",
						"type": "UTF8"
					},
					{
						"name": "IsPermittedToLogon",
						"type": "BOOLEAN"
					},
					{
						"name": "LogonName",
						"type": "UTF8"
					},
					{
						"name": "IsExternalLogonProvider",
						"type": "BOOLEAN"
					},
					{
						"name": "HashedPassword",
						"type": "BINARY"
					},
					{
						"name": "IsSystemUser",
						"type": "BOOLEAN"
					},
					{
						"name": "IsEmployee",
						"type": "BOOLEAN"
					},
					{
						"name": "IsSalesperson",
						"type": "BOOLEAN"
					},
					{
						"name": "UserPreferences",
						"type": "UTF8"
					},
					{
						"name": "PhoneNumber",
						"type": "UTF8"
					},
					{
						"name": "FaxNumber",
						"type": "UTF8"
					},
					{
						"name": "EmailAddress",
						"type": "UTF8"
					},
					{
						"name": "Photo",
						"type": "BINARY"
					},
					{
						"name": "CustomFields",
						"type": "UTF8"
					},
					{
						"name": "OtherLanguages",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/People_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "People_Archive.parquet",
						"folderPath": "data/Application/People_Archive",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PersonID",
						"type": "INT32"
					},
					{
						"name": "FullName",
						"type": "UTF8"
					},
					{
						"name": "PreferredName",
						"type": "UTF8"
					},
					{
						"name": "SearchName",
						"type": "UTF8"
					},
					{
						"name": "IsPermittedToLogon",
						"type": "BOOLEAN"
					},
					{
						"name": "LogonName",
						"type": "UTF8"
					},
					{
						"name": "IsExternalLogonProvider",
						"type": "BOOLEAN"
					},
					{
						"name": "HashedPassword",
						"type": "BINARY"
					},
					{
						"name": "IsSystemUser",
						"type": "BOOLEAN"
					},
					{
						"name": "IsEmployee",
						"type": "BOOLEAN"
					},
					{
						"name": "IsSalesperson",
						"type": "BOOLEAN"
					},
					{
						"name": "UserPreferences",
						"type": "UTF8"
					},
					{
						"name": "PhoneNumber",
						"type": "UTF8"
					},
					{
						"name": "FaxNumber",
						"type": "UTF8"
					},
					{
						"name": "EmailAddress",
						"type": "UTF8"
					},
					{
						"name": "Photo",
						"type": "BINARY"
					},
					{
						"name": "CustomFields",
						"type": "UTF8"
					},
					{
						"name": "OtherLanguages",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Purchasing_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{item()}.parquet",
							"type": "Expression"
						},
						"folderPath": {
							"value": "data/@{pipeline().parameters.Schema_Name}/@{item()}",
							"type": "Expression"
						},
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PurchaseOrderLineID",
						"type": "INT32"
					},
					{
						"name": "PurchaseOrderID",
						"type": "INT32"
					},
					{
						"name": "StockItemID",
						"type": "INT32"
					},
					{
						"name": "OrderedOuters",
						"type": "INT32"
					},
					{
						"name": "Description",
						"type": "UTF8"
					},
					{
						"name": "ReceivedOuters",
						"type": "INT32"
					},
					{
						"name": "PackageTypeID",
						"type": "INT32"
					},
					{
						"name": "ExpectedUnitPricePerOuter",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "LastReceiptDate",
						"type": "DATE"
					},
					{
						"name": "IsOrderLineFinalized",
						"type": "BOOLEAN"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "LastEditedWhen",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{item()}.parquet",
							"type": "Expression"
						},
						"folderPath": {
							"value": "data/@{pipeline().parameters.Schema_Name}/@{item()}",
							"type": "Expression"
						},
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "BuyingGroupID",
						"type": "INT32"
					},
					{
						"name": "BuyingGroupName",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StateProvinces')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "StateProvinces.parquet",
						"folderPath": "data/Application/StateProvinces",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "StateProvinceID",
						"type": "INT32"
					},
					{
						"name": "StateProvinceCode",
						"type": "UTF8"
					},
					{
						"name": "StateProvinceName",
						"type": "UTF8"
					},
					{
						"name": "CountryID",
						"type": "INT32"
					},
					{
						"name": "SalesTerritory",
						"type": "UTF8"
					},
					{
						"name": "Border",
						"type": "UTF8"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StateProvinces_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "StateProvinces_Archive.parquet",
						"folderPath": "data/Application/StateProvinces_Archive",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "StateProvinceID",
						"type": "INT32"
					},
					{
						"name": "StateProvinceCode",
						"type": "UTF8"
					},
					{
						"name": "StateProvinceName",
						"type": "UTF8"
					},
					{
						"name": "CountryID",
						"type": "INT32"
					},
					{
						"name": "SalesTerritory",
						"type": "UTF8"
					},
					{
						"name": "Border",
						"type": "UTF8"
					},
					{
						"name": "LatestRecordedPopulation",
						"type": "INT64"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StockItems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "StockItems.parquet",
						"folderPath": "data/Warehouse/StockItems",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "StockItemID",
						"type": "INT32"
					},
					{
						"name": "StockItemName",
						"type": "UTF8"
					},
					{
						"name": "SupplierID",
						"type": "INT32"
					},
					{
						"name": "ColorID",
						"type": "INT32"
					},
					{
						"name": "UnitPackageID",
						"type": "INT32"
					},
					{
						"name": "OuterPackageID",
						"type": "INT32"
					},
					{
						"name": "Brand",
						"type": "UTF8"
					},
					{
						"name": "Size",
						"type": "UTF8"
					},
					{
						"name": "LeadTimeDays",
						"type": "INT32"
					},
					{
						"name": "QuantityPerOuter",
						"type": "INT32"
					},
					{
						"name": "IsChillerStock",
						"type": "BOOLEAN"
					},
					{
						"name": "Barcode",
						"type": "UTF8"
					},
					{
						"name": "TaxRate",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "UTF8"
					},
					{
						"name": "InternalComments",
						"type": "UTF8"
					},
					{
						"name": "Photo",
						"type": "BINARY"
					},
					{
						"name": "CustomFields",
						"type": "UTF8"
					},
					{
						"name": "Tags",
						"type": "UTF8"
					},
					{
						"name": "SearchDetails",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StockItems_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "StockItems_Archive.parquet",
						"folderPath": "data/Warehouse/StockItems_Archive",
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "StockItemID",
						"type": "INT32"
					},
					{
						"name": "StockItemName",
						"type": "UTF8"
					},
					{
						"name": "SupplierID",
						"type": "INT32"
					},
					{
						"name": "ColorID",
						"type": "INT32"
					},
					{
						"name": "UnitPackageID",
						"type": "INT32"
					},
					{
						"name": "OuterPackageID",
						"type": "INT32"
					},
					{
						"name": "Brand",
						"type": "UTF8"
					},
					{
						"name": "Size",
						"type": "UTF8"
					},
					{
						"name": "LeadTimeDays",
						"type": "INT32"
					},
					{
						"name": "QuantityPerOuter",
						"type": "INT32"
					},
					{
						"name": "IsChillerStock",
						"type": "BOOLEAN"
					},
					{
						"name": "Barcode",
						"type": "UTF8"
					},
					{
						"name": "TaxRate",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "UTF8"
					},
					{
						"name": "InternalComments",
						"type": "UTF8"
					},
					{
						"name": "Photo",
						"type": "BINARY"
					},
					{
						"name": "CustomFields",
						"type": "UTF8"
					},
					{
						"name": "Tags",
						"type": "UTF8"
					},
					{
						"name": "SearchDetails",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWI_Standard')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWIInput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWIInput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Warehouse_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ingestion Full Load"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{item()}.parquet",
							"type": "Expression"
						},
						"folderPath": {
							"value": "data/@{pipeline().parameters.Schema_Name}/@{item()}",
							"type": "Expression"
						},
						"fileSystem": "likht"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ColdRoomTemperatureID",
						"type": "INT64"
					},
					{
						"name": "ColdRoomSensorNumber",
						"type": "INT32"
					},
					{
						"name": "RecordedWhen",
						"type": "INT96"
					},
					{
						"name": "Temperature",
						"type": "DECIMAL",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobInput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BlobInput_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWIInput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('WWIInput_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_City')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Countries",
								"type": "DatasetReference"
							},
							"name": "Countries"
						},
						{
							"dataset": {
								"referenceName": "Countries_Archive",
								"type": "DatasetReference"
							},
							"name": "CountriesArchive"
						},
						{
							"dataset": {
								"referenceName": "StateProvinces",
								"type": "DatasetReference"
							},
							"name": "StateProvinces"
						},
						{
							"dataset": {
								"referenceName": "StateProvinces_Archive",
								"type": "DatasetReference"
							},
							"name": "StateProvincesArchive"
						},
						{
							"dataset": {
								"referenceName": "Cities",
								"type": "DatasetReference"
							},
							"name": "Cities"
						},
						{
							"dataset": {
								"referenceName": "Cities_Archive",
								"type": "DatasetReference"
							},
							"name": "CitiesArchive"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataWarehouse",
								"type": "DatasetReference"
							},
							"name": "LoadDimensionCity"
						}
					],
					"transformations": [
						{
							"name": "CountriesAll"
						},
						{
							"name": "CountriesChangeList"
						},
						{
							"name": "StateProvincesAll"
						},
						{
							"name": "StateProvincesChangeList"
						},
						{
							"name": "CitiesAll"
						},
						{
							"name": "CitiesChangeList"
						},
						{
							"name": "JoinStateProvinces"
						},
						{
							"name": "JoinCountries"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "UpdateValidToField"
						},
						{
							"name": "AddLineageKey"
						},
						{
							"name": "SortByValidFrom"
						},
						{
							"name": "AddCityKey"
						},
						{
							"name": "ChangeColumnsOrder"
						},
						{
							"name": "EctractOneRow"
						},
						{
							"name": "AddDefaultRow"
						},
						{
							"name": "DefaultRow"
						},
						{
							"name": "CountriesCutoff"
						},
						{
							"name": "StateProvincesCutoff"
						},
						{
							"name": "CitiesCutoff"
						},
						{
							"name": "SelectValidityPeriods"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     EndOfTime as timestamp (toTimestamp('9999-12-31 23:59:59.0000000','yyyy-MM-dd HH:mm:ss.SSS')),",
						"     LastCutoff as timestamp (toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),",
						"     NewCutoff as timestamp (currentTimestamp())",
						"}",
						"source(output(",
						"          CountryID as integer,",
						"          CountryName as string,",
						"          FormalName as string,",
						"          IsoAlpha3Code as string,",
						"          IsoNumericCode as integer,",
						"          CountryType as string,",
						"          LatestRecordedPopulation as long,",
						"          Continent as string,",
						"          Region as string,",
						"          Subregion as string,",
						"          Border as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Countries",
						"source(output(",
						"          CountryID as integer,",
						"          CountryName as string,",
						"          FormalName as string,",
						"          IsoAlpha3Code as string,",
						"          IsoNumericCode as integer,",
						"          CountryType as string,",
						"          LatestRecordedPopulation as long,",
						"          Continent as string,",
						"          Region as string,",
						"          Subregion as string,",
						"          Border as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> CountriesArchive",
						"source(output(",
						"          StateProvinceID as integer,",
						"          StateProvinceCode as string,",
						"          StateProvinceName as string,",
						"          CountryID as integer,",
						"          SalesTerritory as string,",
						"          Border as string,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> StateProvinces",
						"source(output(",
						"          StateProvinceID as integer,",
						"          StateProvinceCode as string,",
						"          StateProvinceName as string,",
						"          CountryID as integer,",
						"          SalesTerritory as string,",
						"          Border as string,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> StateProvincesArchive",
						"source(output(",
						"          CityID as integer,",
						"          CityName as string,",
						"          StateProvinceID as integer,",
						"          Location as string,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Cities",
						"source(output(",
						"          CityID as integer,",
						"          CityName as string,",
						"          StateProvinceID as integer,",
						"          Location as string,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> CitiesArchive",
						"Countries, CountriesArchive union(byName: true)~> CountriesAll",
						"CountriesCutoff select(mapColumn(",
						"          CountryID,",
						"          CountryName,",
						"          Continent,",
						"          Region,",
						"          Subregion,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CountriesChangeList",
						"StateProvinces, StateProvincesArchive union(byName: true)~> StateProvincesAll",
						"StateProvincesCutoff select(mapColumn(",
						"          StateProvinceID,",
						"          StateProvinceName,",
						"          CountryID,",
						"          SalesTerritory,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StateProvincesChangeList",
						"Cities, CitiesArchive union(byName: true)~> CitiesAll",
						"CitiesCutoff select(mapColumn(",
						"          CityID,",
						"          CityName,",
						"          StateProvinceID,",
						"          Location,",
						"          LatestRecordedPopulation,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CitiesChangeList",
						"CitiesChangeList, StateProvincesChangeList join(CitiesChangeList@StateProvinceID == StateProvincesChangeList@StateProvinceID",
						"     && CitiesChangeList@ValidTo > StateProvincesChangeList@ValidFrom",
						"     && CitiesChangeList@ValidFrom < StateProvincesChangeList@ValidTo,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> JoinStateProvinces",
						"JoinStateProvinces, CountriesChangeList join(StateProvincesChangeList@CountryID == CountriesChangeList@CountryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCountries",
						"JoinCountries select(mapColumn(",
						"          WWICityID = CityID,",
						"          City = CityName,",
						"          StateProvince = StateProvinceName,",
						"          Country = CountryName,",
						"          Continent,",
						"          SalesTerritory,",
						"          Region,",
						"          Subregion,",
						"          Location,",
						"          LatestRecordedPopulation,",
						"          cValidFrom = CitiesChangeList@ValidFrom,",
						"          cValidTo = CitiesChangeList@ValidTo,",
						"          spValidFrom = StateProvincesChangeList@ValidFrom,",
						"          spValidTo = StateProvincesChangeList@ValidTo,",
						"          cnValidFrom = CountriesChangeList@ValidFrom,",
						"          cnValidTo = CountriesChangeList@ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns",
						"SelectValidityPeriods window(over(WWICityID),",
						"     asc(ValidFrom, true),",
						"     ValidTo = lead(ValidFrom, 1, $EndOfTime)) ~> UpdateValidToField",
						"filter1 derive(LoadDateTime = $NewCutoff,",
						"          LatestRecordedPopulation = coalesce(LatestRecordedPopulation, 0)) ~> AddLineageKey",
						"AddLineageKey sort(asc(ValidFrom, true)) ~> SortByValidFrom",
						"SortByValidFrom keyGenerate(output(CityKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddCityKey",
						"AddCityKey select(mapColumn(",
						"          CityKey,",
						"          WWICityID,",
						"          City,",
						"          StateProvince,",
						"          Country,",
						"          Continent,",
						"          SalesTerritory,",
						"          Region,",
						"          Subregion,",
						"          Location,",
						"          LatestRecordedPopulation,",
						"          ValidFrom,",
						"          ValidTo,",
						"          LineageKey = LoadDateTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnsOrder",
						"ChangeColumnsOrder filter(CityKey == 1) ~> EctractOneRow",
						"ChangeColumnsOrder, DefaultRow union(byName: true)~> AddDefaultRow",
						"EctractOneRow derive(CityKey = 0,",
						"          WWICityID = 0,",
						"          City = 'Unknown',",
						"          StateProvince = 'N/A',",
						"          Country = 'N/A',",
						"          Continent = 'N/A',",
						"          SalesTerritory = 'N/A',",
						"          Region = 'N/A',",
						"          Subregion = 'N/A',",
						"          Location = toString(null()),",
						"          LatestRecordedPopulation = 0,",
						"          ValidFrom = toTimestamp('2013-01-01T00:00:00.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          ValidTo = $EndOfTime) ~> DefaultRow",
						"CountriesAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> CountriesCutoff",
						"StateProvincesAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> StateProvincesCutoff",
						"CitiesAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> CitiesCutoff",
						"RenameColumns derive(ValidFrom = greatest(cValidFrom, spValidFrom, cnValidFrom),",
						"          ValidTo = least(cValidTo, spValidTo, cnValidTo)) ~> SelectValidityPeriods",
						"UpdateValidToField filter(ValidFrom < ValidTo) ~> filter1",
						"AddDefaultRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CityID as integer,",
						"          CityName as string,",
						"          StateProvinceID as integer,",
						"          Location as binary,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['Dimension_City2.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LoadDimensionCity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Countries')]",
				"[concat(variables('factoryId'), '/datasets/Countries_Archive')]",
				"[concat(variables('factoryId'), '/datasets/StateProvinces')]",
				"[concat(variables('factoryId'), '/datasets/StateProvinces_Archive')]",
				"[concat(variables('factoryId'), '/datasets/Cities')]",
				"[concat(variables('factoryId'), '/datasets/Cities_Archive')]",
				"[concat(variables('factoryId'), '/datasets/DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_Customer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BuyingGroups",
								"type": "DatasetReference"
							},
							"name": "BuyingGroups"
						},
						{
							"dataset": {
								"referenceName": "BuyingGroups_Archive",
								"type": "DatasetReference"
							},
							"name": "BuyingGroupsArchive"
						},
						{
							"dataset": {
								"referenceName": "CustomerCategories",
								"type": "DatasetReference"
							},
							"name": "CustomerCategories"
						},
						{
							"dataset": {
								"referenceName": "CustomerCategories_Archive",
								"type": "DatasetReference"
							},
							"name": "CustomerCategoriesArchive"
						},
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "Customers_Archive",
								"type": "DatasetReference"
							},
							"name": "CustomersArchive"
						},
						{
							"dataset": {
								"referenceName": "People",
								"type": "DatasetReference"
							},
							"name": "People"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataWarehouse",
								"type": "DatasetReference"
							},
							"name": "LoadDimensionCustomer"
						}
					],
					"transformations": [
						{
							"name": "BuyingGroupsAll"
						},
						{
							"name": "CustomerCategoriesAll"
						},
						{
							"name": "CustomersAll"
						},
						{
							"name": "c"
						},
						{
							"name": "bt"
						},
						{
							"name": "JoinBuyingGroups"
						},
						{
							"name": "JoinCustomerCategories"
						},
						{
							"name": "JoinBillToCustomers"
						},
						{
							"name": "JoinPeople"
						},
						{
							"name": "RenameNeededColumnsOnly"
						},
						{
							"name": "UpdateValidToField"
						},
						{
							"name": "AddLineageKey"
						},
						{
							"name": "SortByValidFrom"
						},
						{
							"name": "AddCustomerKey"
						},
						{
							"name": "ChangeColumnsOrder"
						},
						{
							"name": "ExtractOneRow"
						},
						{
							"name": "AddDefaultRow"
						},
						{
							"name": "DefaultRow"
						},
						{
							"name": "BuyingGroupCutoff"
						},
						{
							"name": "CustomerCategoriesCutoff"
						},
						{
							"name": "BilToCustomersCutoff"
						},
						{
							"name": "CustomersCutoff"
						}
					],
					"scriptLines": [
						"parameters{",
						"     EndOfTime as timestamp (toTimestamp('9999-12-31 23:59:59.999','yyyy-MM-dd HH:mm:ss.SSS')),",
						"     LastCutoff as timestamp (toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),",
						"     NewCutoff as timestamp (currentTimestamp())",
						"}",
						"source(output(",
						"          BuyingGroupID as integer,",
						"          BuyingGroupName as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> BuyingGroups",
						"source(output(",
						"          BuyingGroupID as integer,",
						"          BuyingGroupName as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> BuyingGroupsArchive",
						"source(output(",
						"          CustomerCategoryID as integer,",
						"          CustomerCategoryName as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> CustomerCategories",
						"source(output(",
						"          CustomerCategoryID as integer,",
						"          CustomerCategoryName as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> CustomerCategoriesArchive",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          BillToCustomerID as integer,",
						"          CustomerCategoryID as integer,",
						"          BuyingGroupID as integer,",
						"          PrimaryContactPersonID as integer,",
						"          AlternateContactPersonID as integer,",
						"          DeliveryMethodID as integer,",
						"          DeliveryCityID as integer,",
						"          PostalCityID as integer,",
						"          CreditLimit as decimal(18,2),",
						"          AccountOpenedDate as date,",
						"          StandardDiscountPercentage as decimal(18,3),",
						"          IsStatementSent as boolean,",
						"          IsOnCreditHold as boolean,",
						"          PaymentDays as integer,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          DeliveryRun as string,",
						"          RunPosition as string,",
						"          WebsiteURL as string,",
						"          DeliveryAddressLine1 as string,",
						"          DeliveryAddressLine2 as string,",
						"          DeliveryPostalCode as string,",
						"          DeliveryLocation as string,",
						"          PostalAddressLine1 as string,",
						"          PostalAddressLine2 as string,",
						"          PostalPostalCode as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Customers",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          BillToCustomerID as integer,",
						"          CustomerCategoryID as integer,",
						"          BuyingGroupID as integer,",
						"          PrimaryContactPersonID as integer,",
						"          AlternateContactPersonID as integer,",
						"          DeliveryMethodID as integer,",
						"          DeliveryCityID as integer,",
						"          PostalCityID as integer,",
						"          CreditLimit as decimal(18,2),",
						"          AccountOpenedDate as date,",
						"          StandardDiscountPercentage as decimal(18,3),",
						"          IsStatementSent as boolean,",
						"          IsOnCreditHold as boolean,",
						"          PaymentDays as integer,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          DeliveryRun as string,",
						"          RunPosition as string,",
						"          WebsiteURL as string,",
						"          DeliveryAddressLine1 as string,",
						"          DeliveryAddressLine2 as string,",
						"          DeliveryPostalCode as string,",
						"          DeliveryLocation as string,",
						"          PostalAddressLine1 as string,",
						"          PostalAddressLine2 as string,",
						"          PostalPostalCode as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> CustomersArchive",
						"source(output(",
						"          PersonID as integer,",
						"          FullName as string,",
						"          PreferredName as string,",
						"          SearchName as string,",
						"          IsPermittedToLogon as boolean,",
						"          LogonName as string,",
						"          IsExternalLogonProvider as boolean,",
						"          HashedPassword as binary,",
						"          IsSystemUser as boolean,",
						"          IsEmployee as boolean,",
						"          IsSalesperson as boolean,",
						"          UserPreferences as string,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          EmailAddress as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          OtherLanguages as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> People",
						"BuyingGroups, BuyingGroupsArchive union(byName: true)~> BuyingGroupsAll",
						"CustomerCategories, CustomerCategoriesArchive union(byName: true)~> CustomerCategoriesAll",
						"Customers, CustomersArchive union(byName: true)~> CustomersAll",
						"CustomersCutoff select(mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          BillToCustomerID,",
						"          CustomerCategoryID,",
						"          BuyingGroupID,",
						"          PrimaryContactPersonID,",
						"          AlternateContactPersonID,",
						"          DeliveryMethodID,",
						"          DeliveryCityID,",
						"          PostalCityID,",
						"          CreditLimit,",
						"          AccountOpenedDate,",
						"          StandardDiscountPercentage,",
						"          IsStatementSent,",
						"          IsOnCreditHold,",
						"          PaymentDays,",
						"          PhoneNumber,",
						"          FaxNumber,",
						"          DeliveryRun,",
						"          RunPosition,",
						"          WebsiteURL,",
						"          DeliveryAddressLine1,",
						"          DeliveryAddressLine2,",
						"          DeliveryPostalCode,",
						"          DeliveryLocation,",
						"          PostalAddressLine1,",
						"          PostalAddressLine2,",
						"          PostalPostalCode,",
						"          LastEditedBy,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> c",
						"BilToCustomersCutoff select(mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          BillToCustomerID,",
						"          CustomerCategoryID,",
						"          BuyingGroupID,",
						"          PrimaryContactPersonID,",
						"          AlternateContactPersonID,",
						"          DeliveryMethodID,",
						"          DeliveryCityID,",
						"          PostalCityID,",
						"          CreditLimit,",
						"          AccountOpenedDate,",
						"          StandardDiscountPercentage,",
						"          IsStatementSent,",
						"          IsOnCreditHold,",
						"          PaymentDays,",
						"          PhoneNumber,",
						"          FaxNumber,",
						"          DeliveryRun,",
						"          RunPosition,",
						"          WebsiteURL,",
						"          DeliveryAddressLine1,",
						"          DeliveryAddressLine2,",
						"          DeliveryPostalCode,",
						"          DeliveryLocation,",
						"          PostalAddressLine1,",
						"          PostalAddressLine2,",
						"          PostalPostalCode,",
						"          LastEditedBy,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bt",
						"c, BuyingGroupsAll join(c@BuyingGroupID == BuyingGroupsAll@BuyingGroupID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBuyingGroups",
						"JoinBuyingGroups, CustomerCategoriesAll join(c@CustomerCategoryID == CustomerCategoriesAll@CustomerCategoryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCustomerCategories",
						"JoinCustomerCategories, bt join(c@BillToCustomerID == bt@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBillToCustomers",
						"JoinBillToCustomers, People join(c@PrimaryContactPersonID == PersonID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPeople",
						"JoinPeople select(mapColumn(",
						"          WWICustomerID = c@CustomerID,",
						"          Customer = c@CustomerName,",
						"          BillToCustomer = bt@CustomerName,",
						"          Category = CustomerCategoryName,",
						"          BuyingGroup = BuyingGroupName,",
						"          PrimaryContact = FullName,",
						"          PostalCode = c@DeliveryPostalCode,",
						"          ValidFrom = c@ValidFrom,",
						"          ValidTo = c@ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameNeededColumnsOnly",
						"RenameNeededColumnsOnly window(over(WWICustomerID),",
						"     asc(ValidFrom, true),",
						"     ValidTo = lead(ValidFrom, 1, $EndOfTime)) ~> UpdateValidToField",
						"UpdateValidToField derive(LoadDateTime = $NewCutoff) ~> AddLineageKey",
						"AddLineageKey sort(asc(ValidFrom, true)) ~> SortByValidFrom",
						"SortByValidFrom keyGenerate(output(CustomerKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddCustomerKey",
						"AddCustomerKey select(mapColumn(",
						"          CustomerKey,",
						"          WWICustomerID,",
						"          Customer,",
						"          BillToCustomer,",
						"          Category,",
						"          BuyingGroup,",
						"          PrimaryContact,",
						"          PostalCode,",
						"          ValidFrom,",
						"          ValidTo,",
						"          LoadDateTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnsOrder",
						"ChangeColumnsOrder filter(CustomerKey == 1) ~> ExtractOneRow",
						"ChangeColumnsOrder, DefaultRow union(byName: true)~> AddDefaultRow",
						"ExtractOneRow derive(CustomerKey = 0,",
						"          WWICustomerID = 0,",
						"          Customer = 'Unknown',",
						"          BillToCustomer = 'N/A',",
						"          Category = 'N/A',",
						"          BuyingGroup = 'N/A',",
						"          PrimaryContact = 'N/A',",
						"          PostalCode = 'N/A',",
						"          ValidFrom = toTimestamp('2013-01-01T00:00:00.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          ValidTo = $EndOfTime) ~> DefaultRow",
						"BuyingGroupsAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> BuyingGroupCutoff",
						"CustomerCategoriesAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> CustomerCategoriesCutoff",
						"CustomersAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> BilToCustomersCutoff",
						"CustomersAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> CustomersCutoff",
						"AddDefaultRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CityID as integer,",
						"          CityName as string,",
						"          StateProvinceID as integer,",
						"          Location as binary,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['Dimension_Customer.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LoadDimensionCustomer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BuyingGroups')]",
				"[concat(variables('factoryId'), '/datasets/BuyingGroups_Archive')]",
				"[concat(variables('factoryId'), '/datasets/CustomerCategories')]",
				"[concat(variables('factoryId'), '/datasets/CustomerCategories_Archive')]",
				"[concat(variables('factoryId'), '/datasets/Customers')]",
				"[concat(variables('factoryId'), '/datasets/Customers_Archive')]",
				"[concat(variables('factoryId'), '/datasets/People')]",
				"[concat(variables('factoryId'), '/datasets/DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_Date')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dim_Date",
								"type": "DatasetReference"
							},
							"name": "Date"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dimension_Date",
								"type": "DatasetReference"
							},
							"name": "LoadDimensionDate"
						}
					],
					"transformations": [
						{
							"name": "CalculateColumns",
							"flowlet": {
								"referenceName": "TimeFlowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "DatesOnlyToTheEndOf2023"
						},
						{
							"name": "Dates2017And2020"
						},
						{
							"name": "Dates2013And2016"
						},
						{
							"name": "Dates2021And2023"
						},
						{
							"name": "UnionOriginalDatesTo2020"
						},
						{
							"name": "AddDaysToOriginalDates2"
						},
						{
							"name": "UnionDatesTo2023"
						},
						{
							"name": "AddDaysToOriginalDates"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DateCounter as date (addMonths(lastDayOfMonth(currentDate()),12))",
						"}",
						"source(output(",
						"          Date as date,",
						"          {Day Number} as integer,",
						"          Day as string,",
						"          Month as string,",
						"          {Short Month} as string,",
						"          {Calendar Month Number} as integer,",
						"          {Calendar Month Label} as string,",
						"          {Calendar Year} as integer,",
						"          {Calendar Year Label} as string,",
						"          {Fiscal Month Number} as integer,",
						"          {Fiscal Month Label} as string,",
						"          {Fiscal Year} as integer,",
						"          {Fiscal Year Label} as string,",
						"          {ISO Week Number} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Date",
						"DatesOnlyToTheEndOf2023 compose(mapColumn(",
						"          DateColumn = Date",
						"     ),",
						"     composition: 'TimeFlowlet') ~> CalculateColumns@(output)",
						"UnionDatesTo2023 filter(Date <= addMonths(currentDate(), 12)) ~> DatesOnlyToTheEndOf2023",
						"Date select(mapColumn(",
						"          Date,",
						"          {Day Number},",
						"          Day,",
						"          Month,",
						"          {Short Month},",
						"          {Calendar Month Number},",
						"          {Calendar Month Label},",
						"          {Calendar Year},",
						"          {Calendar Year Label},",
						"          {Fiscal Month Number},",
						"          {Fiscal Month Label},",
						"          {Fiscal Year},",
						"          {Fiscal Year Label},",
						"          {ISO Week Number}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Dates2017And2020",
						"Date select(mapColumn(",
						"          Date,",
						"          {Day Number},",
						"          Day,",
						"          Month,",
						"          {Short Month},",
						"          {Calendar Month Number},",
						"          {Calendar Month Label},",
						"          {Calendar Year},",
						"          {Calendar Year Label},",
						"          {Fiscal Month Number},",
						"          {Fiscal Month Label},",
						"          {Fiscal Year},",
						"          {Fiscal Year Label},",
						"          {ISO Week Number}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Dates2013And2016",
						"Date select(mapColumn(",
						"          Date,",
						"          {Day Number},",
						"          Day,",
						"          Month,",
						"          {Short Month},",
						"          {Calendar Month Number},",
						"          {Calendar Month Label},",
						"          {Calendar Year},",
						"          {Calendar Year Label},",
						"          {Fiscal Month Number},",
						"          {Fiscal Month Label},",
						"          {Fiscal Year},",
						"          {Fiscal Year Label},",
						"          {ISO Week Number}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Dates2021And2023",
						"Dates2013And2016, AddDaysToOriginalDates2 union(byName: true)~> UnionOriginalDatesTo2020",
						"Dates2017And2020 derive(Date = addDays(Date, 1461)) ~> AddDaysToOriginalDates2",
						"UnionOriginalDatesTo2020, AddDaysToOriginalDates union(byName: true)~> UnionDatesTo2023",
						"Dates2021And2023 derive(Date = addDays(Date, 2922)) ~> AddDaysToOriginalDates",
						"CalculateColumns@output sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateColumn as date,",
						"          DayNumber as integer,",
						"          Day as integer,",
						"          Month as string,",
						"          ShortMonth as string,",
						"          CalendarMonthNumber as integer,",
						"          CalendarMonthLabel as string,",
						"          CalendarYear as integer,",
						"          CalendarYearLabel as string,",
						"          FiscalMonthNumber as integer,",
						"          FiscalMonthLabel as string,",
						"          FiscalYear as integer,",
						"          FiscalYearLabel as string,",
						"          ISOWeekNumber as integer",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['Dimension_Date.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LoadDimensionDate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TimeFlowlet')]",
				"[concat(variables('factoryId'), '/datasets/Dim_Date')]",
				"[concat(variables('factoryId'), '/datasets/Dimension_Date')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_Employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "People",
								"type": "DatasetReference"
							},
							"name": "People"
						},
						{
							"dataset": {
								"referenceName": "People_Archive",
								"type": "DatasetReference"
							},
							"name": "PeopleArchive"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataWarehouse",
								"type": "DatasetReference"
							},
							"name": "LoadDimensionEmployee"
						}
					],
					"transformations": [
						{
							"name": "Employees"
						},
						{
							"name": "PeopleArchiveEmployees"
						},
						{
							"name": "EmployeesAll"
						},
						{
							"name": "UpdateValidToColumn"
						},
						{
							"name": "AddLineageKey"
						},
						{
							"name": "SortByValidFrom"
						},
						{
							"name": "AddEmployeeKey"
						},
						{
							"name": "RenameNeededColumns"
						},
						{
							"name": "ExtractOneRow"
						},
						{
							"name": "DefaltRow"
						},
						{
							"name": "AddDefaultRow"
						}
					],
					"scriptLines": [
						"parameters{",
						"     EndOfTime as timestamp (toTimestamp('9999-12-31 23:59:59.999','yyyy-MM-dd HH:mm:ss.SSS')),",
						"     LastCutoff as timestamp (toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),",
						"     NewCutoff as timestamp (currentTimestamp())",
						"}",
						"source(output(",
						"          PersonID as integer,",
						"          FullName as string,",
						"          PreferredName as string,",
						"          SearchName as string,",
						"          IsPermittedToLogon as boolean,",
						"          LogonName as string,",
						"          IsExternalLogonProvider as boolean,",
						"          HashedPassword as binary,",
						"          IsSystemUser as boolean,",
						"          IsEmployee as boolean,",
						"          IsSalesperson as boolean,",
						"          UserPreferences as string,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          EmailAddress as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          OtherLanguages as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> People",
						"source(output(",
						"          PersonID as integer,",
						"          FullName as string,",
						"          PreferredName as string,",
						"          SearchName as string,",
						"          IsPermittedToLogon as boolean,",
						"          LogonName as string,",
						"          IsExternalLogonProvider as boolean,",
						"          HashedPassword as binary,",
						"          IsSystemUser as boolean,",
						"          IsEmployee as boolean,",
						"          IsSalesperson as boolean,",
						"          UserPreferences as string,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          EmailAddress as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          OtherLanguages as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> PeopleArchive",
						"People filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff && IsEmployee == true()) ~> Employees",
						"PeopleArchive filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff && IsEmployee == true()) ~> PeopleArchiveEmployees",
						"Employees, PeopleArchiveEmployees union(byName: true)~> EmployeesAll",
						"EmployeesAll window(over(PersonID),",
						"     asc(ValidFrom, true),",
						"     ValidTo = lead(ValidFrom, 1, $EndOfTime)) ~> UpdateValidToColumn",
						"UpdateValidToColumn derive(LoadDateTime = $NewCutoff) ~> AddLineageKey",
						"AddLineageKey sort(asc(ValidFrom, true)) ~> SortByValidFrom",
						"SortByValidFrom keyGenerate(output(EmployeeKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddEmployeeKey",
						"AddEmployeeKey select(mapColumn(",
						"          EmployeeKey,",
						"          WWIEmployeeID = PersonID,",
						"          Employee = FullName,",
						"          PreferredName,",
						"          IsSalesperson,",
						"          Photo,",
						"          ValidFrom,",
						"          ValidTo,",
						"          LineageKey = LoadDateTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameNeededColumns",
						"RenameNeededColumns filter(EmployeeKey == 1) ~> ExtractOneRow",
						"ExtractOneRow derive(EmployeeKey = 0,",
						"          WWIEmployeeID = 0,",
						"          Employee = 'Unknown',",
						"          PreferredName = 'N/A',",
						"          IsSalesperson = false(),",
						"          ValidFrom = toTimestamp('2013-01-01T00:00:00.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          ValidTo = $EndOfTime) ~> DefaltRow",
						"RenameNeededColumns, DefaltRow union(byName: true)~> AddDefaultRow",
						"AddDefaultRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CityID as integer,",
						"          CityName as string,",
						"          StateProvinceID as integer,",
						"          Location as binary,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['Dimension_Employee.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LoadDimensionEmployee"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/People')]",
				"[concat(variables('factoryId'), '/datasets/People_Archive')]",
				"[concat(variables('factoryId'), '/datasets/DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dimension_StockItem')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StockItems",
								"type": "DatasetReference"
							},
							"name": "StockItems"
						},
						{
							"dataset": {
								"referenceName": "StockItems_Archive",
								"type": "DatasetReference"
							},
							"name": "StockItemsArchive"
						},
						{
							"dataset": {
								"referenceName": "PackageTypes",
								"type": "DatasetReference"
							},
							"name": "PackageTypes"
						},
						{
							"dataset": {
								"referenceName": "Colors",
								"type": "DatasetReference"
							},
							"name": "Colors"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataWarehouse",
								"type": "DatasetReference"
							},
							"name": "LoadDimensionStickItem"
						}
					],
					"transformations": [
						{
							"name": "StockItemsAll"
						},
						{
							"name": "StockItemsCutoff"
						},
						{
							"name": "StockItemsArchiveCutoff"
						},
						{
							"name": "bpt"
						},
						{
							"name": "spt"
						},
						{
							"name": "JoinUnitPackageType"
						},
						{
							"name": "JoinOuterPackageType"
						},
						{
							"name": "JoinColors"
						},
						{
							"name": "RenameNeededColumnsOnly"
						},
						{
							"name": "UpdateValidToField"
						},
						{
							"name": "AddLineageKey"
						},
						{
							"name": "SortByValidFrom"
						},
						{
							"name": "AddStockItemKey"
						},
						{
							"name": "ChangeColumnsOrder"
						},
						{
							"name": "ExtrcatOneRow"
						},
						{
							"name": "AddDefaultRow"
						},
						{
							"name": "DefaultRow"
						}
					],
					"scriptLines": [
						"parameters{",
						"     LastCutoff as timestamp (toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),",
						"     NewCutoff as timestamp (currentTimestamp()),",
						"     EndOfTime as timestamp (toTimestamp('9999-12-31 23:59:59.999','yyyy-MM-dd HH:mm:ss.SSS'))",
						"}",
						"source(output(",
						"          StockItemID as integer,",
						"          StockItemName as string,",
						"          SupplierID as integer,",
						"          ColorID as integer,",
						"          UnitPackageID as integer,",
						"          OuterPackageID as integer,",
						"          Brand as string,",
						"          Size as string,",
						"          LeadTimeDays as integer,",
						"          QuantityPerOuter as integer,",
						"          IsChillerStock as boolean,",
						"          Barcode as string,",
						"          TaxRate as decimal(18,3),",
						"          UnitPrice as decimal(18,2),",
						"          RecommendedRetailPrice as decimal(18,2),",
						"          TypicalWeightPerUnit as decimal(18,3),",
						"          MarketingComments as string,",
						"          InternalComments as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          Tags as string,",
						"          SearchDetails as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> StockItems",
						"source(output(",
						"          StockItemID as integer,",
						"          StockItemName as string,",
						"          SupplierID as integer,",
						"          ColorID as integer,",
						"          UnitPackageID as integer,",
						"          OuterPackageID as integer,",
						"          Brand as string,",
						"          Size as string,",
						"          LeadTimeDays as integer,",
						"          QuantityPerOuter as integer,",
						"          IsChillerStock as boolean,",
						"          Barcode as string,",
						"          TaxRate as decimal(18,3),",
						"          UnitPrice as decimal(18,2),",
						"          RecommendedRetailPrice as decimal(18,2),",
						"          TypicalWeightPerUnit as decimal(18,3),",
						"          MarketingComments as string,",
						"          InternalComments as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          Tags as string,",
						"          SearchDetails as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> StockItemsArchive",
						"source(output(",
						"          PackageTypeID as integer,",
						"          PackageTypeName as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> PackageTypes",
						"source(output(",
						"          ColorID as integer,",
						"          ColorName as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Colors",
						"StockItemsCutoff, StockItemsArchiveCutoff union(byName: true)~> StockItemsAll",
						"StockItems filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> StockItemsCutoff",
						"StockItemsArchive filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> StockItemsArchiveCutoff",
						"PackageTypes select(mapColumn(",
						"          PackageTypeID,",
						"          PackageTypeName,",
						"          LastEditedBy,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bpt",
						"PackageTypes select(mapColumn(",
						"          PackageTypeID,",
						"          PackageTypeName,",
						"          LastEditedBy,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> spt",
						"StockItemsAll, spt join(UnitPackageID == PackageTypeID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinUnitPackageType",
						"JoinUnitPackageType, bpt join(OuterPackageID == bpt@PackageTypeID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOuterPackageType",
						"JoinOuterPackageType, Colors join(StockItemsAll@ColorID == Colors@ColorID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinColors",
						"JoinColors select(mapColumn(",
						"          WWIStockItemID = StockItemID,",
						"          StockItem = StockItemName,",
						"          Color = ColorName,",
						"          SellingPackage = spt@PackageTypeName,",
						"          BuyingPackage = bpt@PackageTypeName,",
						"          Brand,",
						"          Size,",
						"          LeadTimeDays,",
						"          QuantityPerOuter,",
						"          IsChillerStock,",
						"          Barcode,",
						"          TaxRate,",
						"          UnitPrice,",
						"          RecommendedRetailPrice,",
						"          TypicalWeightPerUnit,",
						"          Photo,",
						"          ValidFrom = StockItemsAll@ValidFrom,",
						"          ValidTo = StockItemsAll@ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameNeededColumnsOnly",
						"RenameNeededColumnsOnly window(over(WWIStockItemID),",
						"     asc(ValidFrom, true),",
						"     ValidTo = lead(ValidFrom, 1, $EndOfTime)) ~> UpdateValidToField",
						"UpdateValidToField derive(LoadDateTime = $NewCutoff) ~> AddLineageKey",
						"AddLineageKey sort(asc(ValidFrom, true)) ~> SortByValidFrom",
						"SortByValidFrom keyGenerate(output(StockItemKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddStockItemKey",
						"AddStockItemKey select(mapColumn(",
						"          StockItemKey,",
						"          WWIStockItemID,",
						"          StockItem,",
						"          Color,",
						"          SellingPackage,",
						"          BuyingPackage,",
						"          Brand,",
						"          Size,",
						"          LeadTimeDays,",
						"          QuantityPerOuter,",
						"          IsChillerStock,",
						"          Barcode,",
						"          TaxRate,",
						"          UnitPrice,",
						"          RecommendedRetailPrice,",
						"          TypicalWeightPerUnit,",
						"          Photo,",
						"          ValidFrom,",
						"          ValidTo,",
						"          LineageKey = LoadDateTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnsOrder",
						"ChangeColumnsOrder filter(StockItemKey == 1) ~> ExtrcatOneRow",
						"ChangeColumnsOrder, DefaultRow union(byName: true)~> AddDefaultRow",
						"ExtrcatOneRow derive(StockItemKey = 0,",
						"          WWIStockItemID = 0,",
						"          StockItem = 'Unknown',",
						"          Color = 'N/A',",
						"          SellingPackage = 'N/A',",
						"          BuyingPackage = 'N/A',",
						"          Brand = 'N/A',",
						"          Size = 'N/A',",
						"          LeadTimeDays = 0,",
						"          QuantityPerOuter = 0,",
						"          IsChillerStock = false(),",
						"          Barcode = 'N/A',",
						"          TaxRate = 0.000,",
						"          UnitPrice = 0.00,",
						"          RecommendedRetailPrice = 0.00,",
						"          TypicalWeightPerUnit = 0.000,",
						"          ValidFrom = toTimestamp('2013-01-01T00:00:00.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          ValidTo = $EndOfTime) ~> DefaultRow",
						"AddDefaultRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CityID as integer,",
						"          CityName as string,",
						"          StateProvinceID as integer,",
						"          Location as binary,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['Dimension_StockItem.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LoadDimensionStickItem"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/StockItems')]",
				"[concat(variables('factoryId'), '/datasets/StockItems_Archive')]",
				"[concat(variables('factoryId'), '/datasets/PackageTypes')]",
				"[concat(variables('factoryId'), '/datasets/Colors')]",
				"[concat(variables('factoryId'), '/datasets/DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact_Sale')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Invoices",
								"type": "DatasetReference"
							},
							"name": "Invoices"
						},
						{
							"dataset": {
								"referenceName": "InvoiceLines",
								"type": "DatasetReference"
							},
							"name": "InvoiceLines"
						},
						{
							"dataset": {
								"referenceName": "StockItems",
								"type": "DatasetReference"
							},
							"name": "StockItems"
						},
						{
							"dataset": {
								"referenceName": "PackageTypes",
								"type": "DatasetReference"
							},
							"name": "PackageTypes"
						},
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "Dimension_Customer",
								"type": "DatasetReference"
							},
							"name": "DimensionCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataWarehouse",
								"type": "DatasetReference"
							},
							"name": "LoadFactSale"
						}
					],
					"transformations": [
						{
							"name": "JoinInvoiceLines"
						},
						{
							"name": "JoinStockItems"
						},
						{
							"name": "JoinPackageTypes"
						},
						{
							"name": "JoinCustomers"
						},
						{
							"name": "bt"
						},
						{
							"name": "c"
						},
						{
							"name": "JoinBillToCustomers"
						},
						{
							"name": "RenameNeededColumnsOnly"
						},
						{
							"name": "CalculateFields"
						},
						{
							"name": "RenameCalculatedColumns"
						},
						{
							"name": "FilterDataBetweenCutoffs"
						},
						{
							"name": "SortByInvoiceID"
						},
						{
							"name": "AddSaleKey"
						},
						{
							"name": "ChangeColumnsOrder"
						},
						{
							"name": "UpdateCustomerKey"
						},
						{
							"name": "GetCustomerKeyUpdates"
						},
						{
							"name": "DimCustomer"
						}
					],
					"scriptLines": [
						"parameters{",
						"     LastCutoff as timestamp (toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),",
						"     NewCutoff as timestamp (currentTimestamp())",
						"}",
						"source(output(",
						"          InvoiceID as integer,",
						"          CustomerID as integer,",
						"          BillToCustomerID as integer,",
						"          OrderID as integer,",
						"          DeliveryMethodID as integer,",
						"          ContactPersonID as integer,",
						"          AccountsPersonID as integer,",
						"          SalespersonPersonID as integer,",
						"          PackedByPersonID as integer,",
						"          InvoiceDate as date,",
						"          CustomerPurchaseOrderNumber as string,",
						"          IsCreditNote as boolean,",
						"          CreditNoteReason as string,",
						"          Comments as string,",
						"          DeliveryInstructions as string,",
						"          InternalComments as string,",
						"          TotalDryItems as integer,",
						"          TotalChillerItems as integer,",
						"          DeliveryRun as string,",
						"          RunPosition as string,",
						"          ReturnedDeliveryData as string,",
						"          ConfirmedDeliveryTime as timestamp,",
						"          ConfirmedReceivedBy as string,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Invoices",
						"source(output(",
						"          InvoiceLineID as integer,",
						"          InvoiceID as integer,",
						"          StockItemID as integer,",
						"          Description as string,",
						"          PackageTypeID as integer,",
						"          Quantity as integer,",
						"          UnitPrice as decimal(18,2),",
						"          TaxRate as decimal(18,3),",
						"          TaxAmount as decimal(18,2),",
						"          LineProfit as decimal(18,2),",
						"          ExtendedPrice as decimal(18,2),",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> InvoiceLines",
						"source(output(",
						"          StockItemID as integer,",
						"          StockItemName as string,",
						"          SupplierID as integer,",
						"          ColorID as integer,",
						"          UnitPackageID as integer,",
						"          OuterPackageID as integer,",
						"          Brand as string,",
						"          Size as string,",
						"          LeadTimeDays as integer,",
						"          QuantityPerOuter as integer,",
						"          IsChillerStock as boolean,",
						"          Barcode as string,",
						"          TaxRate as decimal(18,3),",
						"          UnitPrice as decimal(18,2),",
						"          RecommendedRetailPrice as decimal(18,2),",
						"          TypicalWeightPerUnit as decimal(18,3),",
						"          MarketingComments as string,",
						"          InternalComments as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          Tags as string,",
						"          SearchDetails as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> StockItems",
						"source(output(",
						"          PackageTypeID as integer,",
						"          PackageTypeName as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> PackageTypes",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          BillToCustomerID as integer,",
						"          CustomerCategoryID as integer,",
						"          BuyingGroupID as integer,",
						"          PrimaryContactPersonID as integer,",
						"          AlternateContactPersonID as integer,",
						"          DeliveryMethodID as integer,",
						"          DeliveryCityID as integer,",
						"          PostalCityID as integer,",
						"          CreditLimit as decimal(18,2),",
						"          AccountOpenedDate as date,",
						"          StandardDiscountPercentage as decimal(18,3),",
						"          IsStatementSent as boolean,",
						"          IsOnCreditHold as boolean,",
						"          PaymentDays as integer,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          DeliveryRun as string,",
						"          RunPosition as string,",
						"          WebsiteURL as string,",
						"          DeliveryAddressLine1 as string,",
						"          DeliveryAddressLine2 as string,",
						"          DeliveryPostalCode as string,",
						"          DeliveryLocation as string,",
						"          PostalAddressLine1 as string,",
						"          PostalAddressLine2 as string,",
						"          PostalPostalCode as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Customers",
						"source(output(",
						"          CustomerKey as long,",
						"          WWICustomerID as integer,",
						"          Customer as string,",
						"          BillToCustomer as string,",
						"          Category as string,",
						"          BuyingGroup as string,",
						"          PrimaryContact as string,",
						"          PostalCode as string,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp,",
						"          LineageKey as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> DimensionCustomer",
						"Invoices, InvoiceLines join(Invoices@InvoiceID == InvoiceLines@InvoiceID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInvoiceLines",
						"JoinInvoiceLines, StockItems join(InvoiceLines@StockItemID == StockItems@StockItemID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinStockItems",
						"JoinStockItems, PackageTypes join(InvoiceLines@PackageTypeID == PackageTypes@PackageTypeID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPackageTypes",
						"JoinPackageTypes, c join(Invoices@CustomerID == c@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCustomers",
						"Customers select(mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          BillToCustomerID,",
						"          CustomerCategoryID,",
						"          BuyingGroupID,",
						"          PrimaryContactPersonID,",
						"          AlternateContactPersonID,",
						"          DeliveryMethodID,",
						"          DeliveryCityID,",
						"          PostalCityID,",
						"          CreditLimit,",
						"          AccountOpenedDate,",
						"          StandardDiscountPercentage,",
						"          IsStatementSent,",
						"          IsOnCreditHold,",
						"          PaymentDays,",
						"          PhoneNumber,",
						"          FaxNumber,",
						"          DeliveryRun,",
						"          RunPosition,",
						"          WebsiteURL,",
						"          DeliveryAddressLine1,",
						"          DeliveryAddressLine2,",
						"          DeliveryPostalCode,",
						"          DeliveryLocation,",
						"          PostalAddressLine1,",
						"          PostalAddressLine2,",
						"          PostalPostalCode,",
						"          LastEditedBy,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bt",
						"Customers select(mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          BillToCustomerID,",
						"          CustomerCategoryID,",
						"          BuyingGroupID,",
						"          PrimaryContactPersonID,",
						"          AlternateContactPersonID,",
						"          DeliveryMethodID,",
						"          DeliveryCityID,",
						"          PostalCityID,",
						"          CreditLimit,",
						"          AccountOpenedDate,",
						"          StandardDiscountPercentage,",
						"          IsStatementSent,",
						"          IsOnCreditHold,",
						"          PaymentDays,",
						"          PhoneNumber,",
						"          FaxNumber,",
						"          DeliveryRun,",
						"          RunPosition,",
						"          WebsiteURL,",
						"          DeliveryAddressLine1,",
						"          DeliveryAddressLine2,",
						"          DeliveryPostalCode,",
						"          DeliveryLocation,",
						"          PostalAddressLine1,",
						"          PostalAddressLine2,",
						"          PostalPostalCode,",
						"          LastEditedBy,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> c",
						"JoinCustomers, bt join(Invoices@BillToCustomerID == bt@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBillToCustomers",
						"JoinBillToCustomers select(mapColumn(",
						"          InvoiceDateKey = InvoiceDate,",
						"          DeliveryDateKey = ConfirmedDeliveryTime,",
						"          WWIInvoiceID = Invoices@InvoiceID,",
						"          Description,",
						"          Package = PackageTypeName,",
						"          Quantity,",
						"          UnitPrice = InvoiceLines@UnitPrice,",
						"          TaxRate = InvoiceLines@TaxRate,",
						"          TaxAmount,",
						"          Profit = LineProfit,",
						"          ExtendedPrice,",
						"          IsChillerStock,",
						"          WWICityID = c@DeliveryCityID,",
						"          WWICustomerID = Invoices@CustomerID,",
						"          WWIBillToCustomerID = Invoices@BillToCustomerID,",
						"          WWIStockItemID = InvoiceLines@StockItemID,",
						"          WWISalepersonID = SalespersonPersonID,",
						"          LastEditedWhenil = InvoiceLines@LastEditedWhen,",
						"          LastEditedWheni = Invoices@LastEditedWhen",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameNeededColumnsOnly",
						"RenameNeededColumnsOnly derive(TotalExcludingTax = ExtendedPrice-TaxAmount,",
						"          TotalDryItems = iif(!IsChillerStock, Quantity, 0),",
						"          TotalChillerItems = iif(IsChillerStock, Quantity, 0),",
						"          LastModifiedWhen = iif(LastEditedWhenil > LastEditedWheni, LastEditedWhenil, LastEditedWheni),",
						"          DeliveryDateKey = toDate(DeliveryDateKey)) ~> CalculateFields",
						"CalculateFields select(mapColumn(",
						"          InvoiceDateKey,",
						"          DeliveryDateKey,",
						"          WWIInvoiceID,",
						"          Description,",
						"          Package,",
						"          Quantity,",
						"          UnitPrice,",
						"          TaxRate,",
						"          TotalExcludingTax,",
						"          TaxAmount,",
						"          Profit,",
						"          TotalIncludingTax = ExtendedPrice,",
						"          TotalDryItems,",
						"          TotalChillerItems,",
						"          WWICityID,",
						"          WWICustomerID,",
						"          WWIBillToCustomerID,",
						"          WWIStockItemID,",
						"          WWISalepersonID,",
						"          LastModifiedWhen",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameCalculatedColumns",
						"RenameCalculatedColumns filter(LastModifiedWhen > $LastCutoff && LastModifiedWhen <= $NewCutoff) ~> FilterDataBetweenCutoffs",
						"FilterDataBetweenCutoffs sort(asc(WWIInvoiceID, true)) ~> SortByInvoiceID",
						"SortByInvoiceID keyGenerate(output(SaleKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddSaleKey",
						"AddSaleKey select(mapColumn(",
						"          SaleKey,",
						"          CityKey = WWICityID,",
						"          CustomerKey = WWICustomerID,",
						"          BillToCustomerKey = WWIBillToCustomerID,",
						"          StockItemKey = WWIStockItemID,",
						"          InvoiceDateKey,",
						"          DeliveryDateKey,",
						"          SalespersonKey = WWISalepersonID,",
						"          WWIInvoiceID,",
						"          Description,",
						"          Package,",
						"          Quantity,",
						"          UnitPrice,",
						"          TaxRate,",
						"          TotalExcludingTax,",
						"          TaxAmount,",
						"          Profit,",
						"          TotalIncludingTax,",
						"          TotalDryItems,",
						"          TotalChillerItems,",
						"          LastModifiedWhen",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnsOrder",
						"GetCustomerKeyUpdates derive(CustomerKey = coalesce(DimCustomerKey, 0)) ~> UpdateCustomerKey",
						"ChangeColumnsOrder, DimCustomer lookup(CustomerKey == WWICustomerID",
						"     && LastModifiedWhen > ValidFrom",
						"     && LastModifiedWhen <= ValidTo,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> GetCustomerKeyUpdates",
						"DimensionCustomer select(mapColumn(",
						"          DimCustomerKey = CustomerKey,",
						"          WWICustomerID,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DimCustomer",
						"UpdateCustomerKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CityID as integer,",
						"          CityName as string,",
						"          StateProvinceID as integer,",
						"          Location as binary,",
						"          LatestRecordedPopulation as long,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['Fact_Sale.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LoadFactSale"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Invoices')]",
				"[concat(variables('factoryId'), '/datasets/InvoiceLines')]",
				"[concat(variables('factoryId'), '/datasets/StockItems')]",
				"[concat(variables('factoryId'), '/datasets/PackageTypes')]",
				"[concat(variables('factoryId'), '/datasets/Customers')]",
				"[concat(variables('factoryId'), '/datasets/Dimension_Customer')]",
				"[concat(variables('factoryId'), '/datasets/DataWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TimeFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Data Warehouse Full Load"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "GenerateNewFieldsBasedOnDate"
						},
						{
							"name": "UpdateLabelColumns"
						},
						{
							"name": "RenameColumns"
						},
						{
							"name": "input"
						},
						{
							"name": "output"
						}
					],
					"scriptLines": [
						"input(output(",
						"          DateColumn as date",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input",
						"input derive({Day Number} = dayOfMonth(DateColumn),",
						"          Day = dayOfMonth(DateColumn),",
						"          Month = case(month(DateColumn) == 1, 'January', month(DateColumn) == 2, 'February', month(DateColumn) == 3, 'March', month(DateColumn) == 4, 'April', \r",
						"month(DateColumn) == 5, 'May', month(DateColumn) == 6, 'June', month(DateColumn) == 7, 'July', month(DateColumn) == 8, 'August', \r",
						"month(DateColumn) == 9, 'September', month(DateColumn) == 10, 'October', month(DateColumn) == 11, 'November', month(DateColumn) == 12, 'December'),",
						"          {Short Month} = case(month(DateColumn) == 1, 'Jan', month(DateColumn) == 2, 'Feb', month(DateColumn) == 3, 'Mar', month(DateColumn) == 4, 'Apr', \r",
						"month(DateColumn) == 5, 'May', month(DateColumn) == 6, 'June', month(DateColumn) == 7, 'July', month(DateColumn) == 8, 'Aug', \r",
						"month(DateColumn) == 9, 'Sept', month(DateColumn) == 10, 'Oct', month(DateColumn) == 11, 'Nov', month(DateColumn) == 12, 'Dec'),",
						"          {Calendar Month Number} = month(DateColumn),",
						"          {Calendar Month Label} = 1,",
						"          {Calendar Year} = year(DateColumn),",
						"          {Calendar Year Label} = 1,",
						"          {Fiscal Month Number} = month(DateColumn) + 2,",
						"          {Fiscal Month Label} = 1,",
						"          {Fiscal Year} = year(DateColumn),",
						"          {Fiscal Year Label} = 1,",
						"          {ISO Week Number} = dayOfWeek(DateColumn)) ~> GenerateNewFieldsBasedOnDate",
						"GenerateNewFieldsBasedOnDate derive({Calendar Year Label} = concat('CY', toString({Calendar Year})),",
						"          {Fiscal Year Label} = concat('FY', toString({Fiscal Year})),",
						"          {Calendar Month Label} = concat('CY', toString({Calendar Year}), '-', toString({Short Month})),",
						"          {Fiscal Month Label} = concat('FY', toString({Calendar Year}), '-', toString({Short Month}))) ~> UpdateLabelColumns",
						"UpdateLabelColumns select(mapColumn(",
						"          DateColumn,",
						"          DayNumber = {Day Number},",
						"          Day,",
						"          Month,",
						"          ShortMonth = {Short Month},",
						"          CalendarMonthNumber = {Calendar Month Number},",
						"          CalendarMonthLabel = {Calendar Month Label},",
						"          CalendarYear = {Calendar Year},",
						"          CalendarYearLabel = {Calendar Year Label},",
						"          FiscalMonthNumber = {Fiscal Month Number},",
						"          FiscalMonthLabel = {Fiscal Month Label},",
						"          FiscalYear = {Fiscal Year},",
						"          FiscalYearLabel = {Fiscal Year Label},",
						"          ISOWeekNumber = {ISO Week Number}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumns",
						"RenameColumns output() ~> output"
					]
				}
			},
			"dependsOn": []
		}
	]
}