{
	"name": "Dimension_Customer",
	"properties": {
		"folder": {
			"name": "Data Warehouse Full Load"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "BuyingGroups",
						"type": "DatasetReference"
					},
					"name": "BuyingGroups"
				},
				{
					"dataset": {
						"referenceName": "BuyingGroups_Archive",
						"type": "DatasetReference"
					},
					"name": "BuyingGroupsArchive"
				},
				{
					"dataset": {
						"referenceName": "CustomerCategories",
						"type": "DatasetReference"
					},
					"name": "CustomerCategories"
				},
				{
					"dataset": {
						"referenceName": "CustomerCategories_Archive",
						"type": "DatasetReference"
					},
					"name": "CustomerCategoriesArchive"
				},
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "Customers_Archive",
						"type": "DatasetReference"
					},
					"name": "CustomersArchive"
				},
				{
					"dataset": {
						"referenceName": "People",
						"type": "DatasetReference"
					},
					"name": "People"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DataWarehouse",
						"type": "DatasetReference"
					},
					"name": "LoadDimensionCustomer"
				}
			],
			"transformations": [
				{
					"name": "BuyingGroupsAll"
				},
				{
					"name": "CustomerCategoriesAll"
				},
				{
					"name": "CustomersAll"
				},
				{
					"name": "c"
				},
				{
					"name": "bt"
				},
				{
					"name": "JoinBuyingGroups"
				},
				{
					"name": "JoinCustomerCategories"
				},
				{
					"name": "JoinBillToCustomers"
				},
				{
					"name": "JoinPeople"
				},
				{
					"name": "RenameNeededColumnsOnly"
				},
				{
					"name": "UpdateValidToField"
				},
				{
					"name": "AddLineageKey"
				},
				{
					"name": "SortByValidFrom"
				},
				{
					"name": "AddCustomerKey"
				},
				{
					"name": "ChangeColumnsOrder"
				},
				{
					"name": "ExtractOneRow"
				},
				{
					"name": "AddDefaultRow"
				},
				{
					"name": "DefaultRow"
				},
				{
					"name": "BuyingGroupCutoff"
				},
				{
					"name": "CustomerCategoriesCutoff"
				},
				{
					"name": "BilToCustomersCutoff"
				},
				{
					"name": "CustomersCutoff"
				}
			],
			"scriptLines": [
				"parameters{",
				"     EndOfTime as timestamp (toTimestamp('9999-12-31 23:59:59.999','yyyy-MM-dd HH:mm:ss.SSS')),",
				"     LastCutoff as timestamp (toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),",
				"     NewCutoff as timestamp (currentTimestamp())",
				"}",
				"source(output(",
				"          BuyingGroupID as integer,",
				"          BuyingGroupName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> BuyingGroups",
				"source(output(",
				"          BuyingGroupID as integer,",
				"          BuyingGroupName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> BuyingGroupsArchive",
				"source(output(",
				"          CustomerCategoryID as integer,",
				"          CustomerCategoryName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CustomerCategories",
				"source(output(",
				"          CustomerCategoryID as integer,",
				"          CustomerCategoryName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CustomerCategoriesArchive",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          BillToCustomerID as integer,",
				"          CustomerCategoryID as integer,",
				"          BuyingGroupID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          CreditLimit as decimal(18,2),",
				"          AccountOpenedDate as date,",
				"          StandardDiscountPercentage as decimal(18,3),",
				"          IsStatementSent as boolean,",
				"          IsOnCreditHold as boolean,",
				"          PaymentDays as integer,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as string,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Customers",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          BillToCustomerID as integer,",
				"          CustomerCategoryID as integer,",
				"          BuyingGroupID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          CreditLimit as decimal(18,2),",
				"          AccountOpenedDate as date,",
				"          StandardDiscountPercentage as decimal(18,3),",
				"          IsStatementSent as boolean,",
				"          IsOnCreditHold as boolean,",
				"          PaymentDays as integer,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as string,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CustomersArchive",
				"source(output(",
				"          PersonID as integer,",
				"          FullName as string,",
				"          PreferredName as string,",
				"          SearchName as string,",
				"          IsPermittedToLogon as boolean,",
				"          LogonName as string,",
				"          IsExternalLogonProvider as boolean,",
				"          HashedPassword as binary,",
				"          IsSystemUser as boolean,",
				"          IsEmployee as boolean,",
				"          IsSalesperson as boolean,",
				"          UserPreferences as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          EmailAddress as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          OtherLanguages as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> People",
				"BuyingGroups, BuyingGroupsArchive union(byName: true)~> BuyingGroupsAll",
				"CustomerCategories, CustomerCategoriesArchive union(byName: true)~> CustomerCategoriesAll",
				"Customers, CustomersArchive union(byName: true)~> CustomersAll",
				"CustomersCutoff select(mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          BillToCustomerID,",
				"          CustomerCategoryID,",
				"          BuyingGroupID,",
				"          PrimaryContactPersonID,",
				"          AlternateContactPersonID,",
				"          DeliveryMethodID,",
				"          DeliveryCityID,",
				"          PostalCityID,",
				"          CreditLimit,",
				"          AccountOpenedDate,",
				"          StandardDiscountPercentage,",
				"          IsStatementSent,",
				"          IsOnCreditHold,",
				"          PaymentDays,",
				"          PhoneNumber,",
				"          FaxNumber,",
				"          DeliveryRun,",
				"          RunPosition,",
				"          WebsiteURL,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode,",
				"          DeliveryLocation,",
				"          PostalAddressLine1,",
				"          PostalAddressLine2,",
				"          PostalPostalCode,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> c",
				"BilToCustomersCutoff select(mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          BillToCustomerID,",
				"          CustomerCategoryID,",
				"          BuyingGroupID,",
				"          PrimaryContactPersonID,",
				"          AlternateContactPersonID,",
				"          DeliveryMethodID,",
				"          DeliveryCityID,",
				"          PostalCityID,",
				"          CreditLimit,",
				"          AccountOpenedDate,",
				"          StandardDiscountPercentage,",
				"          IsStatementSent,",
				"          IsOnCreditHold,",
				"          PaymentDays,",
				"          PhoneNumber,",
				"          FaxNumber,",
				"          DeliveryRun,",
				"          RunPosition,",
				"          WebsiteURL,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode,",
				"          DeliveryLocation,",
				"          PostalAddressLine1,",
				"          PostalAddressLine2,",
				"          PostalPostalCode,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> bt",
				"c, BuyingGroupsAll join(c@BuyingGroupID == BuyingGroupsAll@BuyingGroupID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBuyingGroups",
				"JoinBuyingGroups, CustomerCategoriesAll join(c@CustomerCategoryID == CustomerCategoriesAll@CustomerCategoryID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCustomerCategories",
				"JoinCustomerCategories, bt join(c@BillToCustomerID == bt@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBillToCustomers",
				"JoinBillToCustomers, People join(c@PrimaryContactPersonID == PersonID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinPeople",
				"JoinPeople select(mapColumn(",
				"          WWICustomerID = c@CustomerID,",
				"          Customer = c@CustomerName,",
				"          BillToCustomer = bt@CustomerName,",
				"          Category = CustomerCategoryName,",
				"          BuyingGroup = BuyingGroupName,",
				"          PrimaryContact = FullName,",
				"          PostalCode = c@DeliveryPostalCode,",
				"          ValidFrom = c@ValidFrom,",
				"          ValidTo = c@ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameNeededColumnsOnly",
				"RenameNeededColumnsOnly window(over(WWICustomerID),",
				"     asc(ValidFrom, true),",
				"     ValidTo = lead(ValidFrom, 1, $EndOfTime)) ~> UpdateValidToField",
				"UpdateValidToField derive(LoadDateTime = $NewCutoff) ~> AddLineageKey",
				"AddLineageKey sort(asc(ValidFrom, true)) ~> SortByValidFrom",
				"SortByValidFrom keyGenerate(output(CustomerKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddCustomerKey",
				"AddCustomerKey select(mapColumn(",
				"          CustomerKey,",
				"          WWICustomerID,",
				"          Customer,",
				"          BillToCustomer,",
				"          Category,",
				"          BuyingGroup,",
				"          PrimaryContact,",
				"          PostalCode,",
				"          ValidFrom,",
				"          ValidTo,",
				"          LoadDateTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ChangeColumnsOrder",
				"ChangeColumnsOrder filter(CustomerKey == 1) ~> ExtractOneRow",
				"ChangeColumnsOrder, DefaultRow union(byName: true)~> AddDefaultRow",
				"ExtractOneRow derive(CustomerKey = 0,",
				"          WWICustomerID = 0,",
				"          Customer = 'Unknown',",
				"          BillToCustomer = 'N/A',",
				"          Category = 'N/A',",
				"          BuyingGroup = 'N/A',",
				"          PrimaryContact = 'N/A',",
				"          PostalCode = 'N/A',",
				"          ValidFrom = toTimestamp('2013-01-01T00:00:00.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
				"          ValidTo = $EndOfTime) ~> DefaultRow",
				"BuyingGroupsAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> BuyingGroupCutoff",
				"CustomerCategoriesAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> CustomerCategoriesCutoff",
				"CustomersAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> BilToCustomersCutoff",
				"CustomersAll filter(ValidFrom > $LastCutoff && ValidFrom <= $NewCutoff) ~> CustomersCutoff",
				"AddDefaultRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CityID as integer,",
				"          CityName as string,",
				"          StateProvinceID as integer,",
				"          Location as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['Dimension_Customer.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> LoadDimensionCustomer"
			]
		}
	}
}