{
	"name": "Fact_Sale",
	"properties": {
		"folder": {
			"name": "Data Warehouse Full Load"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Invoices",
						"type": "DatasetReference"
					},
					"name": "Invoices"
				},
				{
					"dataset": {
						"referenceName": "InvoiceLines",
						"type": "DatasetReference"
					},
					"name": "InvoiceLines"
				},
				{
					"dataset": {
						"referenceName": "StockItems",
						"type": "DatasetReference"
					},
					"name": "StockItems"
				},
				{
					"dataset": {
						"referenceName": "PackageTypes",
						"type": "DatasetReference"
					},
					"name": "PackageTypes"
				},
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "Dimension_Customer",
						"type": "DatasetReference"
					},
					"name": "DimensionCustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DataWarehouse",
						"type": "DatasetReference"
					},
					"name": "LoadFactSale"
				}
			],
			"transformations": [
				{
					"name": "JoinInvoiceLines"
				},
				{
					"name": "JoinStockItems"
				},
				{
					"name": "JoinPackageTypes"
				},
				{
					"name": "JoinCustomers"
				},
				{
					"name": "bt"
				},
				{
					"name": "c"
				},
				{
					"name": "JoinBillToCustomers"
				},
				{
					"name": "RenameNeededColumnsOnly"
				},
				{
					"name": "CalculateFields"
				},
				{
					"name": "RenameCalculatedColumns"
				},
				{
					"name": "FilterDataBetweenCutoffs"
				},
				{
					"name": "SortByInvoiceID"
				},
				{
					"name": "AddSaleKey"
				},
				{
					"name": "ChangeColumnsOrder"
				},
				{
					"name": "UpdateCustomerKey"
				},
				{
					"name": "GetCustomerKeyUpdates"
				},
				{
					"name": "DimCustomer"
				}
			],
			"scriptLines": [
				"parameters{",
				"     LastCutoff as timestamp (toTimestamp('2012-05-06T12:31:17.0000000','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),",
				"     NewCutoff as timestamp (currentTimestamp())",
				"}",
				"source(output(",
				"          InvoiceID as integer,",
				"          CustomerID as integer,",
				"          BillToCustomerID as integer,",
				"          OrderID as integer,",
				"          DeliveryMethodID as integer,",
				"          ContactPersonID as integer,",
				"          AccountsPersonID as integer,",
				"          SalespersonPersonID as integer,",
				"          PackedByPersonID as integer,",
				"          InvoiceDate as date,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsCreditNote as boolean,",
				"          CreditNoteReason as string,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          TotalDryItems as integer,",
				"          TotalChillerItems as integer,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          ReturnedDeliveryData as string,",
				"          ConfirmedDeliveryTime as timestamp,",
				"          ConfirmedReceivedBy as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Invoices",
				"source(output(",
				"          InvoiceLineID as integer,",
				"          InvoiceID as integer,",
				"          StockItemID as integer,",
				"          Description as string,",
				"          PackageTypeID as integer,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(18,2),",
				"          TaxRate as decimal(18,3),",
				"          TaxAmount as decimal(18,2),",
				"          LineProfit as decimal(18,2),",
				"          ExtendedPrice as decimal(18,2),",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> InvoiceLines",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> StockItems",
				"source(output(",
				"          PackageTypeID as integer,",
				"          PackageTypeName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PackageTypes",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          BillToCustomerID as integer,",
				"          CustomerCategoryID as integer,",
				"          BuyingGroupID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          CreditLimit as decimal(18,2),",
				"          AccountOpenedDate as date,",
				"          StandardDiscountPercentage as decimal(18,3),",
				"          IsStatementSent as boolean,",
				"          IsOnCreditHold as boolean,",
				"          PaymentDays as integer,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as string,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Customers",
				"source(output(",
				"          CustomerKey as long,",
				"          WWICustomerID as integer,",
				"          Customer as string,",
				"          BillToCustomer as string,",
				"          Category as string,",
				"          BuyingGroup as string,",
				"          PrimaryContact as string,",
				"          PostalCode as string,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          LineageKey as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DimensionCustomer",
				"Invoices, InvoiceLines join(Invoices@InvoiceID == InvoiceLines@InvoiceID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinInvoiceLines",
				"JoinInvoiceLines, StockItems join(InvoiceLines@StockItemID == StockItems@StockItemID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinStockItems",
				"JoinStockItems, PackageTypes join(InvoiceLines@PackageTypeID == PackageTypes@PackageTypeID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinPackageTypes",
				"JoinPackageTypes, c join(Invoices@CustomerID == c@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCustomers",
				"Customers select(mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          BillToCustomerID,",
				"          CustomerCategoryID,",
				"          BuyingGroupID,",
				"          PrimaryContactPersonID,",
				"          AlternateContactPersonID,",
				"          DeliveryMethodID,",
				"          DeliveryCityID,",
				"          PostalCityID,",
				"          CreditLimit,",
				"          AccountOpenedDate,",
				"          StandardDiscountPercentage,",
				"          IsStatementSent,",
				"          IsOnCreditHold,",
				"          PaymentDays,",
				"          PhoneNumber,",
				"          FaxNumber,",
				"          DeliveryRun,",
				"          RunPosition,",
				"          WebsiteURL,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode,",
				"          DeliveryLocation,",
				"          PostalAddressLine1,",
				"          PostalAddressLine2,",
				"          PostalPostalCode,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> bt",
				"Customers select(mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          BillToCustomerID,",
				"          CustomerCategoryID,",
				"          BuyingGroupID,",
				"          PrimaryContactPersonID,",
				"          AlternateContactPersonID,",
				"          DeliveryMethodID,",
				"          DeliveryCityID,",
				"          PostalCityID,",
				"          CreditLimit,",
				"          AccountOpenedDate,",
				"          StandardDiscountPercentage,",
				"          IsStatementSent,",
				"          IsOnCreditHold,",
				"          PaymentDays,",
				"          PhoneNumber,",
				"          FaxNumber,",
				"          DeliveryRun,",
				"          RunPosition,",
				"          WebsiteURL,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode,",
				"          DeliveryLocation,",
				"          PostalAddressLine1,",
				"          PostalAddressLine2,",
				"          PostalPostalCode,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> c",
				"JoinCustomers, bt join(Invoices@BillToCustomerID == bt@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBillToCustomers",
				"JoinBillToCustomers select(mapColumn(",
				"          InvoiceDateKey = InvoiceDate,",
				"          DeliveryDateKey = ConfirmedDeliveryTime,",
				"          WWIInvoiceID = Invoices@InvoiceID,",
				"          Description,",
				"          Package = PackageTypeName,",
				"          Quantity,",
				"          UnitPrice = InvoiceLines@UnitPrice,",
				"          TaxRate = InvoiceLines@TaxRate,",
				"          TaxAmount,",
				"          Profit = LineProfit,",
				"          ExtendedPrice,",
				"          IsChillerStock,",
				"          WWICityID = c@DeliveryCityID,",
				"          WWICustomerID = Invoices@CustomerID,",
				"          WWIBillToCustomerID = Invoices@BillToCustomerID,",
				"          WWIStockItemID = InvoiceLines@StockItemID,",
				"          WWISalepersonID = SalespersonPersonID,",
				"          LastEditedWhenil = InvoiceLines@LastEditedWhen,",
				"          LastEditedWheni = Invoices@LastEditedWhen",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameNeededColumnsOnly",
				"RenameNeededColumnsOnly derive(TotalExcludingTax = ExtendedPrice-TaxAmount,",
				"          TotalDryItems = iif(!IsChillerStock, Quantity, 0),",
				"          TotalChillerItems = iif(IsChillerStock, Quantity, 0),",
				"          LastModifiedWhen = iif(LastEditedWhenil > LastEditedWheni, LastEditedWhenil, LastEditedWheni),",
				"          DeliveryDateKey = toDate(DeliveryDateKey)) ~> CalculateFields",
				"CalculateFields select(mapColumn(",
				"          InvoiceDateKey,",
				"          DeliveryDateKey,",
				"          WWIInvoiceID,",
				"          Description,",
				"          Package,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          TotalExcludingTax,",
				"          TaxAmount,",
				"          Profit,",
				"          TotalIncludingTax = ExtendedPrice,",
				"          TotalDryItems,",
				"          TotalChillerItems,",
				"          WWICityID,",
				"          WWICustomerID,",
				"          WWIBillToCustomerID,",
				"          WWIStockItemID,",
				"          WWISalepersonID,",
				"          LastModifiedWhen",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameCalculatedColumns",
				"RenameCalculatedColumns filter(LastModifiedWhen > $LastCutoff && LastModifiedWhen <= $NewCutoff) ~> FilterDataBetweenCutoffs",
				"FilterDataBetweenCutoffs sort(asc(WWIInvoiceID, true)) ~> SortByInvoiceID",
				"SortByInvoiceID keyGenerate(output(SaleKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddSaleKey",
				"AddSaleKey select(mapColumn(",
				"          SaleKey,",
				"          CityKey = WWICityID,",
				"          CustomerKey = WWICustomerID,",
				"          BillToCustomerKey = WWIBillToCustomerID,",
				"          StockItemKey = WWIStockItemID,",
				"          InvoiceDateKey,",
				"          DeliveryDateKey,",
				"          SalespersonKey = WWISalepersonID,",
				"          WWIInvoiceID,",
				"          Description,",
				"          Package,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          TotalExcludingTax,",
				"          TaxAmount,",
				"          Profit,",
				"          TotalIncludingTax,",
				"          TotalDryItems,",
				"          TotalChillerItems,",
				"          LastModifiedWhen",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ChangeColumnsOrder",
				"GetCustomerKeyUpdates derive(CustomerKey = coalesce(DimCustomerKey, 0)) ~> UpdateCustomerKey",
				"ChangeColumnsOrder, DimCustomer lookup(CustomerKey == WWICustomerID",
				"     && LastModifiedWhen > ValidFrom",
				"     && LastModifiedWhen <= ValidTo,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'right')~> GetCustomerKeyUpdates",
				"DimensionCustomer select(mapColumn(",
				"          DimCustomerKey = CustomerKey,",
				"          WWICustomerID,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DimCustomer",
				"UpdateCustomerKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CityID as integer,",
				"          CityName as string,",
				"          StateProvinceID as integer,",
				"          Location as binary,",
				"          LatestRecordedPopulation as long,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['Fact_Sale.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> LoadFactSale"
			]
		}
	}
}